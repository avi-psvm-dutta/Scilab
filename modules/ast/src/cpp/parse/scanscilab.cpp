
#line 3 "src/cpp/parse/scanscilab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{
FILE *yy_input_file;

char *yy_ch_buf;		/* input buffer */
char *yy_buf_pos;		/* current position in input buffer */

/* Size of input buffer in bytes, not including room for EOB
 * characters.
 */
yy_size_t yy_buf_size;

/* Number of characters read into yy_ch_buf, not including EOB
 * characters.
 */
int yy_n_chars;

/* Whether we "own" the buffer - i.e., we know we created it,
 * and can realloc() it to grow it, and should free() it to
 * delete it.
 */
int yy_is_our_buffer;

/* Whether this is an "interactive" input source; if so, and
 * if we're using stdio for input, then we want to use getc()
 * instead of fread(), to make sure we stop fetching input after
 * each newline.
 */
int yy_is_interactive;

/* Whether we're considered to be at the beginning of a line.
 * If so, '^' rules will be active on the next match, otherwise
 * not.
 */
int yy_at_bol;

int yy_bs_lineno; /**< The line count. */
int yy_bs_column; /**< The column count. */

/* Whether to try to fill the input buffer when we reach the
 * end of it.
 */
int yy_fill_buffer;

int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
/* When an EOF's been seen but there's still some text to process
 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
 * shouldn't try reading from the input source any more.  We might
 * still have a bunch of tokens to match, though, because of
 * possible backing-up.
 *
 * When we actually see the EOF, we change the status to "new"
 * (via yyrestart()), so that the user can continue scanning by
 * just pointing yyin at a new input file.
 */
#define YY_BUFFER_EOF_PENDING 2

};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file, int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b, FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes, int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *, yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 145
#define YY_END_OF_BUFFER 146
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
flex_int32_t yy_verify;
flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_acclist[946] =
{
0,
16408,  123,  123,  133,  133,  113,  113,  109,  109,  146,
84,  145,   80,   84,  145,   81,  145,   81,   84,  145,
78,   84,  145,   75,   84,  145,   27,   84,  145,   75,
84,  145,   30,   84,  145,   79,   84,  145,   34,   84,
145,   35,   84,  145,   48,   84,  145,   47,   84,  145,
37,   84,  145,   46,   84,  145,   67,   84,  145,   49,
84,  145,   69,   84,  145,   38,   84,  145,   36,   84,
145,   60,   84,  145,   64,   84,  145,   61,   84,  145,
26,   84,  145,   65,   84,  145,   50,   84,  145,   66,
84,  145,   51,   84,  145,   75,   84,  145,   75,   84,

145,   75,   84,  145,   75,   84,  145,   75,   84,  145,
75,   84,  145,   75,   84,  145,   75,   84,  145,   75,
84,  145,   75,   84,  145,   75,   84,  145,   39,   84,
145,   32,   84,  145,   40,   84,  145,   26,   84,  145,
84,  145,   84,  145,   84,  145,   84,  145,   84,  145,
84,  145,   84,  145,   84,  145,   84,  145,   80,   84,
145, 16408,   75,   84,  145,   27,   84,  145,   75,   84,
145,   75,   84,  145,   75,   84,  145,   75,   84,  145,
75,   84,  145,   75,   84,  145,   75,   84,  145,   75,
84,  145,   75,   84,  145,   75,   84,  145,   75,   84,

145,   75,   84,  145,   84,  145,   84,  145,   84,  145,
84,  145,   84,  145,   84,  145,   84,  145,   84,  145,
84,  145,  123,  124,  145,  122,  145,  122,  124,  145,
120,  124,  145,  119,  124,  145,  124,  145,  133,  134,
145,  132,  145,  132,  134,  145,  129,  134,  145,  130,
134,  145,  134,  145,  113,  114,  145,  112,  145,  112,
114,  145,  114,  145,  114,  145,  109,  145,  108,  145,
108,  145,  107,  145,  106,  107,  145,  103,  145,  103,
107,  145,  107,  145,   98,  145,   80,   98,  145,   89,
145,   89,   98,  145,   78,   98,  145,   75,   98,  145,

27,   98,  145,   75,   98,  145,   30,   98,  145,   79,
98,  145,   85,   87,   98,  145,   86,   98,  145,   48,
98,  145,   92,   98,  145,   37,   98,  145,   94,   98,
145,   67,   98,  145,   49,   98,  145,   69,   98,  145,
38,   88,   98,  145,   36,   98,  145,   60,   98,  145,
64,   98,  145,   61,   98,  145,   26,   98,  145,   65,
98,  145,   50,   98,  145,   90,   98,  145,   51,   98,
145,   39,   98,  145,   32,   98,  145,   91,   98,  145,
26,   98,  145,   98,  145,   98,  145,   98,  145,   98,
145,   98,  145,   98,  145,   98,  145,   98,  145,  144,

145,  135,  145,  138,  145,  138,  145,   78,  145,   79,
145,  140,  144,  145,  137,  145,  144,  145,  136,  145,
141,  144,  145,  139,  144,  145,  142,  144,  145,  143,
144,  145,  145,   25,  145,  145,   25,  145,  145,   25,
145,   25,  145,   25,  145,   25,  145,   25,  145,   25,
145,   25,  145,   25,  145,   25,  145,   25,  145,   25,
145,  145,  145,  145,  145,  145,  145,  145,  145,   80,
82,   82,   81,   75,   75,    3,   29,   75,    2,   28,
75,   31,   51,   41,   42,   68,   43,   74,   44,   45,
76,   77,   73,   69,   62,   59,   58,   63,   75,   75,

75,   17,   75,   75,   75,   75,   75,    4,   75,   75,
75,   75,   75,   75,   75,   75,   33,   75,   80, 16408,
75,   75,    3,   29,   75,    2,   28,   75,   75,   75,
75,   17,   75,   75,   75,   75,   75,    4,   75,   75,
75,   75,   75,   75,   75,   75,   75,  123,  122,  115,
116,  117,  118,  133,  132,  125,  126,  127,  128,  113,
112,  110,  111,  109,  108,  106,  103,  104,  105,   80,
87,   96,   97,   88,   89,   29,   75,   28,   75,  101,
88,  144,  135,  138,   76,  144,   77,  144,   25,   25,
3,   25,    2,   25,   25,   25,   25,   17,   25,   25,

25,   25,   25,    4,   25,   25,   25,   25,   25,   25,
25,   25,   25,   83,   83,   55,   52,   53,   54,   56,
72,   73,   70,   71,   57,   75,   75,   75,   75,   75,
8,   75,   15,   75,   75,   75,   75,   75,   75,   75,
75,   20,   75,   75,    1,   75, 8216, 8216,   75,   75,
75,   75,   75,    8,   75,   15,   75,   75,   75,   75,
75,   75,   75,   75,   20,   75,   75,    1,   75,  121,
121,  131,  131,   93,   95,  102,   99,  100,   25,   25,
25,   25,   25,    8,   25,   15,   25,   25,   25,   25,
25,   25,   25,   25,   20,   25,   25,   75,   12,   75,

75,   75,    6,   75,   75,   75,   75,   75,   75,   75,
75,    5,   75,   75,    1,    1,   75,    1,    1,    1,
1,    1,    1,    1,    1,   75, 8216,   75,   12,   75,
75,   75,    6,   75,   75,   75,   75,   75,   75,   75,
75,    5,   75,   75,    1,    1,   75,    1,    1,    1,
1,    1,    1,    1,    1,   75,   25,   12,   25,   25,
25,    6,   25,   25,   25,   25,   25,   25,   25,   25,
5,   25,   25,   25,   75,   75,   18,   75,   21,   75,
75,   75,   75,   75,   75,   75,   75,   75,   75,   16,
75,    1,    1,    1,    1,    1,    1,    1,   75,   75,

18,   75,   21,   75,   75,   75,   75,   75,   75,   75,
75,   75,   75,   16,   75,    1, 8216,    1, 8216,    1,
1,    1,    1,    1,    1,    1,   25,   25,   18,   25,
21,   25,   25,   25,   25,   25,   25,   25,   25,   25,
25,   16,   25,   75,    7,   75,   75,   75,   75,   23,
75,   22,   75,    9,   75,   10,   75,    1,    1,    1,
75,    7,   75,   75,   75,   75,   23,   75,   22,   75,
9,   75,   10,   75,    1, 8216,    1,    1,    1,   25,
7,   25,   25,   25,   25,   23,   25,   22,   25,    9,
25,   10,   25,   75,   75,   75,   75,    1,   75,   75,

75,   75,   75,    1,   75,   25,   25,   25,   25,   19,
75,   75,   13,   75,   75,   19,   75,   75,   13,   75,
75,   19,   25,   25,   13,   25,   25,   75,   11,   75,
75,   11,   75,   25,   11,   25,   75,   75,   25,   14,
75,   14,   75,   14,   25
} ;

static yyconst flex_int16_t yy_accept[816] =
{
0,
1,    1,    2,    3,    4,    5,    6,    7,    8,    9,
10,   10,   10,   10,   10,   10,   10,   10,   10,   11,
13,   16,   18,   21,   24,   27,   30,   33,   36,   39,
42,   45,   48,   51,   54,   57,   60,   63,   66,   69,
72,   75,   78,   81,   84,   87,   90,   93,   96,   99,
102,  105,  108,  111,  114,  117,  120,  123,  126,  129,
132,  135,  138,  141,  143,  145,  147,  149,  151,  153,
155,  157,  159,  163,  166,  169,  172,  175,  178,  181,
184,  187,  190,  193,  196,  199,  202,  205,  207,  209,
211,  213,  215,  217,  219,  221,  223,  226,  228,  231,

234,  237,  239,  242,  244,  247,  250,  253,  255,  258,
260,  263,  265,  267,  269,  271,  273,  275,  278,  280,
283,  285,  287,  290,  292,  295,  298,  301,  304,  307,
310,  313,  317,  320,  323,  326,  329,  332,  335,  338,
341,  345,  348,  351,  354,  357,  360,  363,  366,  369,
372,  375,  378,  381,  384,  386,  388,  390,  392,  394,
396,  398,  400,  402,  404,  406,  408,  410,  412,  415,
417,  419,  421,  424,  427,  430,  433,  434,  436,  437,
439,  440,  442,  444,  446,  448,  450,  452,  454,  456,
458,  460,  462,  463,  464,  465,  466,  467,  468,  469,

470,  471,  472,  473,  473,  473,  474,  475,  475,  475,
475,  475,  475,  475,  475,  475,  476,  476,  476,  476,
476,  476,  476,  476,  476,  479,  482,  483,  484,  484,
485,  486,  487,  488,  489,  490,  491,  492,  492,  493,
494,  495,  495,  495,  495,  496,  497,  497,  498,  498,
499,  499,  499,  500,  501,  502,  504,  505,  506,  507,
508,  510,  511,  512,  513,  514,  515,  516,  517,  518,
518,  519,  519,  519,  519,  519,  519,  519,  519,  519,
521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
521,  521,  522,  522,  522,  522,  522,  522,  522,  522,

522,  523,  523,  523,  523,  523,  523,  523,  523,  523,
526,  529,  530,  531,  532,  534,  535,  536,  537,  538,
540,  541,  542,  543,  544,  545,  546,  547,  548,  548,
548,  548,  548,  548,  548,  548,  548,  549,  550,  551,
552,  553,  554,  554,  555,  556,  557,  558,  559,  560,
560,  561,  562,  563,  564,  565,  566,  567,  568,  569,
570,  571,  572,  573,  574,  574,  575,  576,  578,  580,
580,  580,  581,  582,  583,  584,  585,  587,  589,  590,
590,  590,  590,  590,  590,  590,  590,  590,  591,  591,
591,  591,  591,  591,  591,  591,  591,  593,  595,  596,

597,  598,  600,  601,  602,  603,  604,  606,  607,  608,
609,  610,  611,  612,  613,  614,  614,  614,  614,  614,
614,  614,  614,  615,  616,  616,  616,  616,  616,  616,
616,  616,  616,  616,  616,  616,  616,  616,  616,  617,
618,  619,  620,  621,  622,  623,  623,  624,  624,  625,
626,  627,  628,  629,  630,  631,  633,  635,  636,  637,
638,  639,  640,  641,  642,  644,  645,  647,  647,  647,
647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
647,  647,  647,  647,  647,  647,  648,  649,  649,  649,

649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
649,  649,  650,  651,  652,  653,  654,  656,  658,  659,
660,  661,  662,  663,  664,  665,  667,  668,  670,  670,
670,  670,  671,  672,  673,  674,  675,  676,  677,  678,
679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
679,  679,  679,  679,  679,  680,  681,  682,  683,  684,
686,  688,  689,  690,  691,  692,  693,  694,  695,  697,
698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
699,  701,  702,  703,  705,  706,  707,  708,  709,  710,
711,  712,  714,  715,  716,  718,  719,  720,  721,  722,

723,  724,  725,  726,  727,  727,  727,  727,  727,  727,
727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
727,  727,  728,  728,  728,  728,  728,  728,  728,  729,
731,  732,  733,  735,  736,  737,  738,  739,  740,  741,
742,  744,  745,  746,  748,  749,  750,  751,  752,  753,
754,  755,  756,  757,  757,  757,  757,  757,  757,  757,
758,  760,  761,  762,  764,  765,  766,  767,  768,  769,
770,  771,  773,  774,  775,  776,  777,  779,  781,  782,
783,  784,  785,  786,  787,  788,  789,  790,  792,  793,
794,  795,  796,  797,  798,  799,  799,  799,  799,  799,

799,  799,  799,  800,  801,  803,  805,  806,  807,  808,
809,  810,  811,  812,  813,  814,  816,  818,  820,  821,
822,  823,  824,  825,  826,  827,  828,  829,  831,  833,
834,  835,  836,  837,  838,  839,  840,  841,  842,  844,
845,  847,  848,  849,  850,  852,  854,  856,  858,  859,
860,  861,  861,  861,  862,  864,  865,  866,  867,  869,
871,  873,  875,  877,  878,  879,  880,  881,  883,  884,
885,  886,  888,  890,  892,  894,  895,  896,  897,  898,
900,  901,  902,  903,  904,  906,  907,  908,  909,  910,
912,  913,  915,  916,  918,  919,  921,  922,  924,  925,

927,  928,  929,  931,  932,  934,  935,  937,  938,  939,
940,  942,  944,  946,  946
} ;

static yyconst flex_int32_t yy_ec[256] =
{
0,
1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    2,    1,    5,    6,    7,    8,    9,   10,   11,
12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
23,   24,    6,   25,    6,    6,    6,   26,   27,   28,
6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
6,    6,    6,   29,    6,    6,    6,    6,    6,    6,
30,   31,   32,   33,    6,    1,   34,   35,   36,   37,

38,   39,    6,   40,   41,    6,   42,   43,   44,   45,
46,    6,    6,   47,   48,   49,   50,    6,   51,    6,
52,    6,   53,   54,   55,   56,    1,   57,   57,   57,
57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
57,   57,   57,   58,   58,   58,   58,   58,   58,   58,
58,   58,   58,   58,   58,   58,   58,   58,   58,   59,
59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
59,   59,   59,   59,   59,   59,   60,   59,   59,   59,
61,    1,    1,   62,   62,   62,   62,   62,   62,   62,

62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
62,   62,   62,   63,   64,   64,   64,   64,   64,   64,
64,   64,   64,   64,   64,   64,   65,   66,   67,   68,
69,   69,   69,   70,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1
} ;

static yyconst flex_int32_t yy_meta[71] =
{
0,
1,    2,    3,    4,    5,    6,    6,    7,    1,    5,
8,    1,    9,    1,   10,    1,   11,    9,   12,    1,
10,    8,    8,    8,    1,    6,    6,    6,    6,    1,
1,    1,    1,    6,    6,    6,    6,    6,    6,    6,
6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
6,    6,    1,    1,    1,    1,    1,    1,    1,    1,
1,    6,    6,    6,    6,    6,    6,    6,    6,    6
} ;

static yyconst flex_int16_t yy_base[841] =
{
0,
0,   70,  138,  141,  149,  157,  160,  166,  146,  153,
173,  178,  196,    0,  265,  320,  376,    0, 1114, 4153,
183,  270,  279, 4153,  239,  248,  419, 1090, 4153, 4153,
4153,  155, 4153, 4153, 4153,  336,  175,  310, 4153, 4153,
269,  272,  275,  276, 4153, 1079, 4153, 4153,  311,  421,
423,  323,  425,  451,  463,  465,  467,  470,  492, 4153,
1040, 4153,  454,  465,  273,  476,  132,  485,  490,  469,
495, 1034,  555,  505,  514,  624,  557,  559,  561,  599,
563,  601,  606,  608,  630,  636,  667,  640,  304,  651,
137,  660,  665,  505,  670, 1026,    0, 4153, 1076,  274,

351, 1056,    0, 4153, 1068,  365,  456, 1047,    0, 4153,
1054, 1027, 1025,    0, 4153, 1031, 4153,  960, 4153,  953,
460, 4153,  730,  639,  659, 4153,  709,  697,  740,  900,
4153, 4153, 4153,  446,  888, 4153,  886,  763,  598,  766,
893, 4153,  537,  474,  647,  649, 4153,  876, 4153, 4153,
4153,  833, 4153,  654,  694,  572,  740,  239,  748,  644,
753,  824,    0,  877, 4153,  859, 4153, 4153,    0, 4153,
495, 4153,    0,    0,    0,    0, 4153,  753,  762,  805,
581,  808,  812,  810,  837,  814,  849,  855,  861,  863,
868,  890,  863,  654,  874,  262,  883,  867,  888,  795,

768, 4153,  845,  948,  951,  955,  932,  925,  727,  930,
316,  935,  919,  940,  788,    0,  945,  877,  950,  609,
955,  959,  964,  745,  998, 1000, 4153, 4153,    0, 4153,
498,  767,  758, 1014,  732, 4153, 4153,    0, 4153, 1017,
1039,  726,  897,  733, 4153, 4153,  772, 4153,  883, 4153,
1030,    0, 1031, 1033, 1039, 1046, 1058, 1061, 1064, 1073,
1076, 1080, 1088, 1095, 1102, 1111, 1117, 1124, 4153, 1040,
1119, 1117, 1122, 1127, 1132, 1137, 1142, 1147, 1152, 1212,
1159, 1168, 1182,  914, 1187,  720, 1192, 1196, 1201,  686,
1261, 1244, 1207, 1111, 1230,  733, 1237, 1241, 1246,  682,

1267, 1251, 1254, 1261,  901, 1266, 1280, 1285,  679, 1319,
1321, 1323, 1325, 1337, 1328, 1350, 1355, 1362, 1367, 1374,
1379, 1386, 1393, 1398, 1402, 1415, 1417, 1420, 1413, 1418,
1423, 1428, 1433, 1438, 1443, 1448,    0, 4153, 4153, 4153,
4153, 4153, 1267,    0, 4153, 4153, 4153, 4153, 4153, 1507,
0, 4153, 4153, 4153,    0, 4153,  682, 4153, 4153, 4153,
1511, 4153,  833, 1029,  665,  676, 1514, 1491, 1504,  654,
626,  622,  612,    0,  601, 4153,    0,    0, 1508, 1491,
1401, 1501,  907, 1506, 1510, 1515,  544, 1515, 1529, 1485,
1534,  910, 1539, 1543, 1548,  540, 1582, 1584, 1586, 1588,

1600, 1591, 1613, 1618, 1625, 1630, 1637, 1642, 1649, 1656,
1661, 1665, 1678, 1680, 1683, 1676, 1681, 1686, 1691, 1696,
1701, 1706, 4153,  592, 1711, 1716, 1721, 1726, 1731, 1736,
1741, 1746, 1751, 1756, 1761, 1766, 1771, 1776, 4153, 4153,
4153, 4153, 4153, 4153, 1819,  521,  519,  482,  446, 4153,
1813, 1811, 1815, 1830, 1837, 1839, 1842, 1844, 1856, 1861,
1868, 1870, 1873, 1875, 1887, 1899, 1948, 1872, 1886, 1962,
2022, 1968, 1495, 1973, 1075, 1978, 1665, 1983,  400, 2043,
1989, 1880, 1994, 1097, 1999, 2003, 2008,  314, 2013, 2018,
2036, 2041, 2057, 2062, 2067, 4153, 2127, 2073, 2082, 2087,

2095, 2100, 2105, 2110, 2115, 2120, 2125, 2130, 2135, 2140,
2145, 2179, 2181, 2186, 2188, 2195, 2203, 2210, 2212, 2217,
2225, 2229, 2234, 2241, 2248, 2253, 2256, 2305, 2319, 2324,
2329, 4153,  356, 4153,  354,  326,  324,  256,  166,  154,
2334, 2339, 2344, 2349, 2354, 2359, 2364, 2369, 2374, 2379,
2384, 2389, 2394, 2399, 2433, 2435, 2440, 2442, 2449, 2457,
2464, 2466, 2471, 2479, 2483, 2488, 2495, 2502, 2507, 2510,
2503, 2508, 2513, 2518, 2523, 2528, 2533, 2538, 2543, 2577,
2579, 2581, 2583, 2586, 2605, 2608, 2611, 2617, 2620, 2634,
2636, 2648, 2650,    0,    0, 2633, 2021, 2643, 1160, 2648,

2652, 2657,  108, 2691, 2664, 2674, 2684, 2689, 2694, 2699,
2704, 2709, 2714, 2719, 2724, 2729, 2734, 2739, 2744, 2749,
2754, 2814, 2760, 2769, 2774, 2782, 2787, 2792, 2826, 2828,
2830, 2832, 2835, 2854, 2857, 2860, 2866, 2869, 2883, 2885,
2897, 2899, 2928,    0, 2883, 2076, 2897, 1323, 2902, 2668,
2907,   90, 2941, 2914, 2928, 2934, 2939, 2944, 2949, 2983,
2985, 2987, 2989, 2992, 3011, 3014, 3017, 3023, 3026, 3040,
3042, 3054, 3056, 3058, 3070,    0, 3072, 3084, 3086, 3088,
3100, 3112, 3115, 3118, 3130, 3134, 3142, 3148, 3135, 3141,
3146, 3151, 3156, 3161, 3166, 3171, 3176, 3181, 3186, 3191,

3196,    0, 3230,    0, 3232, 3234, 3237, 3239, 3246, 3261,
3264, 3268, 3280, 3283, 3295, 3292,    0, 1515, 3279, 3288,
3293, 3298, 3303, 3308, 3313, 3347,    0, 3349, 3351, 3354,
3356, 3363, 3378, 3381, 3385, 3397, 3400, 3412, 3409, 3415,
3427, 3431, 3440, 3434, 3443, 3449, 3456, 3462, 3449, 3455,
3460,    0,    0, 3494, 3496, 3498, 3500, 3512, 3503, 3526,
3528, 3530, 3560, 3513, 3527, 3532, 3566, 3568, 3570, 3572,
3584, 3575, 3598, 3600, 3602, 3606, 3614, 3628, 3630,    0,
3632, 3636, 3654, 3658,    0, 3662, 3666, 3680, 3684, 3688,
3702, 3706, 3710, 3718, 3724, 3732, 3740, 3746, 3755, 3748,

3762, 3764, 3770, 3777, 3779, 3786, 3792, 3801, 3808, 3810,
3805, 3823, 3832, 4153, 3881, 3893, 3905, 3917, 3929, 3941,
3948, 3955, 3966, 3972, 3979, 3991, 4003, 4015, 4027, 4039,
4046, 4053, 4065, 4076, 4087, 4097, 4104, 4116, 4128, 4140
} ;

static yyconst flex_int16_t yy_def[841] =
{
0,
814,  814,  815,  815,  816,  816,  817,  817,  818,  818,
819,  819,  814,   13,  820,  820,  814,   17,  814,  814,
814,  814,  814,  814,  821,  822,  821,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,   27,   27,
27,   27,   27,   27,   27,   27,   27,   27,   27,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  823,  824,  825,  824,   76,   76,   76,   76,
76,   76,   76,   76,   76,   76,   76,  814,  814,  814,
814,  814,  814,  814,  814,  814,  826,  814,  814,  814,

814,  814,  827,  814,  814,  814,  814,  814,  828,  814,
814,  814,  814,  829,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,   27,  822,   27,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  830,  814,  814,  814,  814,  814,  830,  814,
830,  814,  830,  830,  830,  830,  814,  831,  832,  831,
814,  180,  180,  180,  180,  180,  180,  180,  180,  180,
180,  180,  814,  814,  814,  814,  814,  814,  814,  814,

814,  814,  814,  814,  814,  814,   27,  814,  814,  814,
814,  814,  814,  814,  814,  128,  814,  814,  814,  814,
814,  814,  814,  814,   27,   27,  814,  814,  833,  814,
814,  814,  814,  814,  814,  814,  814,  834,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  835,   27,   27,   27,   27,   27,   27,   27,   27,
27,   27,   27,   27,   27,   27,   27,   27,  814,  814,
27,  814,  814,  814,  814,  814,  814,  814,  814,  823,
836,  837,  814,  814,  814,  814,  814,  814,  814,  814,
838,   76,  814,  814,  814,  814,  814,  814,  814,  814,

825,  814,  814,  814,  814,  814,  814,  814,  814,   76,
76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
76,   76,   76,   76,   76,   76,   76,   76,  814,  814,
814,  814,  814,  814,  814,  814,  826,  814,  814,  814,
814,  814,  814,  827,  814,  814,  814,  814,  814,  814,
828,  814,  814,  814,  829,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,   27,   27,  814,
814,  814,  814,  830,  814,  814,  830,  830,  180,  814,
814,  814,  814,  814,  814,  814,  814,  832,  814,  814,
814,  814,  814,  814,  814,  814,  180,  180,  180,  180,

180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
180,  180,  180,  180,  180,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
27,   27,   27,   27,   27,   27,  814,  814,  814,  814,
836,  814,  814,  814,  814,  814,  814,  814,  814,  837,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  838,  814,  814,  814,

814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,   76,   76,   76,   76,   76,   76,   76,   76,   76,
76,   76,   76,   76,   76,   76,   76,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  180,  180,  180,  180,  180,  180,
180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
814,  814,  814,  814,  814,  814,  814,  814,  814,   27,
27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
27,   27,   27,  839,  467,  839,  839,  839,  839,  839,

839,  839,  839,   27,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  838,  814,  814,  814,  814,  814,  814,   76,   76,
76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
76,   76,  840,  528,  839,  839,  839,  839,  839,  839,
839,  839,   76,  814,  814,  814,  814,  814,  814,  180,
180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
180,  180,  180,  180,   27,  128,   27,   27,   27,   27,
27,   27,   27,   27,   27,   27,   27,   27,  839,  839,
839,  839,  839,  839,  839,  814,  814,  814,  814,  814,

814,  471,   76,  301,   76,   76,   76,   76,   76,   76,
76,   76,   76,   76,   76,   76,  839,  840,  839,  839,
839,  839,  839,  839,  839,  180,  388,  180,  180,  180,
180,  180,  180,  180,  180,  180,  180,  180,  180,   27,
27,   27,   27,   27,   27,   27,   27,   27,  839,  839,
839,  471,  480,   76,   76,   76,   76,   76,   76,   76,
76,   76,  840,  839,  839,  839,  180,  180,  180,  180,
180,  180,  180,  180,  180,   27,   27,   27,   27,  467,
76,   76,   76,   76,  528,  180,  180,  180,  180,   27,
27,   27,   27,   76,   76,   76,   76,  180,  180,  180,

180,   27,   27,   76,   76,  180,  180,   27,   76,  180,
27,   76,  180,    0,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814
} ;

static yyconst flex_int16_t yy_nxt[4224] =
{
0,
20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
40,   41,   42,   43,   44,   25,   25,   25,   25,   45,
46,   47,   48,   25,   49,   50,   51,   52,   53,   25,
54,   25,   25,   25,   25,   55,   56,   57,   58,   25,
59,   25,   60,   61,   62,   63,   20,   20,   20,   20,
20,   64,   65,   66,   67,   68,   69,   70,   71,   72,
20,   73,   22,   23,   24,   74,   75,   76,   28,   29,
30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
40,   41,   42,   43,   44,   74,   74,   74,   74,   45,

46,   47,   48,   74,   77,   78,   79,   80,   81,   74,
82,   74,   74,   74,   74,   83,   84,   85,   86,   74,
87,   74,   60,   61,   62,   63,   20,   20,   20,   20,
20,   88,   89,   90,   91,   92,   93,   94,   95,   96,
98,   99,  100,   98,   99,  100,  725,  101,  115,  116,
101,  104,  105,  106,  102,  115,  116,  102,  107,  104,
105,  106,  110,  111,  695,  108,  107,  228,  110,  111,
540,  229,  112,  108,  118,  119,  120,  113,  112,  118,
119,  120,  539,  113,  201,  202,  203,  237,  274,  274,
121,  238,  239,  331,  331,  121,  122,  123,  124,  125,

126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
146,  127,  127,  127,  127,  147,  148,  149,  150,  127,
127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
127,  127,  127,  127,  127,  127,  127,  127,  151,  152,
153,  154,  122,  122,  122,  122,  122,  155,  156,  157,
158,  159,  159,  160,  161,  162,  164,  165,  166,  167,
244,  204,  538,  247,  168,  169,  249,  251,  339,  170,
204,  206,  171,  340,  205,  172,  173,  174,  175,  176,
205,  245,  246,  205,  248,  274,  274,  250,  246,  205,

208,  209,  210,  211,  212,  212,  213,  214,  215,  217,
218,  219,  220,  221,  221,  222,  223,  224,  418,  418,
176,  164,  165,  166,  167,  537,  240,  536,  241,  168,
169,  272,  272,  272,  170,  242,  243,  171,  207,  207,
172,  173,  174,  175,  176,  230,  242,  243,  231,  207,
207,  207,  232,  233,  234,  341,  534,  253,  532,  207,
342,  207,  329,  329,  329,  257,  235,  258,  236,  346,
618,  207,  427,  427,  347,  176,  177,  177,  177,  177,
177,  178,  179,  180,  177,  177,  177,  177,  177,  177,
177,  177,  177,  181,  177,  177,  177,  177,  177,  177,

177,  178,  178,  178,  178,  177,  177,  177,  177,  178,
182,  183,  184,  185,  186,  178,  187,  178,  178,  178,
178,  188,  189,  190,  191,  178,  192,  178,  177,  177,
177,  177,  177,  177,  177,  177,  177,  193,  194,  195,
196,  197,  197,  198,  199,  200,  225,  226,  207,  207,
207,  207,  207,  207,  254,  270,  611,  225,  228,  207,
348,  207,  229,  207,  449,  349,  255,  226,  256,  207,
259,  207,  359,  207,  260,  247,  246,  360,  207,  207,
208,  209,  210,  211,  212,  212,  213,  214,  215,  261,
207,  207,  207,  207,  207,  207,  248,  207,  207,  207,

449,  207,  263,  207,  264,  207,  291,  377,  207,  266,
236,  262,  378,  207,  440,  207,  267,  265,  207,  207,
207,  271,  271,  271,  271,  271,  277,  277,  277,  277,
207,  268,  273,  273,  273,  273,  273,  447,  244,  447,
207,  275,  275,  275,  275,  275,  275,  275,  275,  276,
275,  278,  278,  278,  278,  278,  280,  202,  203,  245,
246,  282,  334,  334,  334,  334,  293,  294,  295,  296,
297,  297,  298,  299,  300,  302,  303,  304,  305,  306,
306,  307,  308,  309,  292,  292,  292,  292,  292,  292,
292,  292,  313,  237,  423,  292,  554,  292,  239,  292,

547,  292,  375,  312,  314,  292,  315,  292,  318,  292,
237,  292,  319,  373,  238,  239,  283,  284,  285,  286,
287,  287,  288,  289,  290,  291,  292,  292,  292,  292,
272,  272,  272,  292,  292,  292,  292,  292,  372,  320,
204,  316,  540,  317,  292,  322,  292,  292,  249,  292,
251,  310,  311,  205,  321,  270,  292,  292,  292,  205,
204,  367,  310,  292,  292,  434,  434,  323,  292,  250,
539,  246,  311,  205,  292,  325,  246,  373,  292,  205,
324,  538,  326,  357,  292,  293,  294,  295,  296,  297,
297,  298,  299,  300,  292,  292,  328,  328,  328,  328,

328,  277,  277,  277,  277,  292,  327,  330,  330,  330,
330,  330,  416,  416,  416,  292,  332,  332,  332,  332,
332,  332,  332,  332,  333,  332,  335,  335,  335,  335,
335,  361,  202,  203,  244,  511,  207,  207,  504,  446,
362,  446,  495,  363,  447,  364,  365,  207,  442,  366,
271,  271,  271,  271,  271,  245,  246,  207,  217,  218,
219,  220,  221,  221,  222,  223,  224,  368,  369,  201,
202,  203,  230,  247,  441,  231,  491,  491,  368,  372,
233,  234,  240,  232,  241,  425,  425,  425,  369,  500,
500,  242,  243,  235,  248,  236,  273,  273,  273,  273,

273,  438,  242,  243,  275,  275,  275,  275,  275,  278,
278,  278,  278,  278,  380,  381,  382,  383,  384,  384,
385,  386,  387,  389,  390,  391,  392,  393,  393,  394,
395,  396,  397,  398,  536,  379,  379,  379,  379,  379,
379,  379,  379,  397,  431,  400,  379,  202,  379,  370,
379,  422,  379,  398,  399,  402,  379,  401,  379,  405,
379,  376,  379,  406,  379,  379,  380,  381,  382,  383,
384,  384,  385,  386,  387,  379,  379,  379,  375,  403,
279,  404,  379,  379,  249,  379,  269,  407,  379,  379,
379,  379,  252,  379,  373,  379,  379,  379,  409,  379,

410,  379,  371,  408,  370,  250,  379,  412,  227,  379,
448,  379,  448,  411,  413,  449,  379,  379,  379,  415,
415,  415,  415,  415,  420,  420,  420,  420,  379,  414,
417,  417,  417,  417,  417,  432,  432,  432,  379,  419,
419,  419,  419,  419,  421,  421,  421,  421,  421,  204,
423,  424,  204,  423,  424,  358,  204,  507,  507,  207,
207,  357,  205,  543,  543,  205,  550,  550,  205,  205,
207,  205,  489,  489,  489,  205,  429,  429,  429,  429,
207,  207,  207,  207,  207,  207,  426,  426,  426,  426,
426,  428,  428,  428,  428,  428,  430,  430,  430,  430,

430,  216,  216,  216,  216,  216,  433,  433,  433,  433,
433,  435,  435,  435,  435,  435,  436,  436,  436,  436,
437,  437,  437,  437,  437,  207,  207,  207,  207,  444,
537,  251,  234,  356,  444,  445,  207,  354,  207,  242,
243,  270,  242,  243,  353,  371,  207,  444,  207,  444,
242,  243,  246,  242,  243,  240,  352,  241,  207,  207,
207,  207,  246,  350,  242,  243,  207,  207,  451,  207,
345,  207,  343,  207,  207,  242,  243,  207,  338,  207,
452,  453,  336,  454,  207,  207,  207,  207,  207,  207,
279,  207,  207,  269,  207,  252,  207,  456,  227,  207,

207,  207,  207,  207,  207,  455,  207,  207,  207,  207,
457,  207,  207,  814,  207,  207,  207,  458,  207,  459,
814,  207,  207,  207,  207,  814,  207,  814,  207,  207,
207,  607,  607,  207,  814,  460,  461,  462,  207,  207,
207,  814,  463,  207,  207,  207,  207,  207,  464,  207,
207,  207,  207,  614,  614,  207,  814,  207,  814,  207,
291,  814,  207,  814,  466,  207,  814,  207,  465,  498,
498,  498,  207,  271,  271,  271,  271,  271,  271,  271,
271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
271,  271,  271,  271,  271,  271,  271,  467,  468,  468,

468,  468,  468,  469,  469,  469,  469,  469,  470,  470,
470,  470,  470,  280,  202,  203,  691,  691,  282,  814,
472,  473,  474,  475,  476,  476,  477,  478,  479,  481,
482,  483,  484,  485,  485,  486,  487,  488,  281,  281,
281,  281,  281,  490,  490,  490,  490,  490,  492,  492,
492,  492,  492,  493,  493,  493,  493,  494,  494,  494,
494,  494,  291,  292,  292,  292,  292,  292,  291,  532,
533,  292,  292,  283,  284,  285,  286,  287,  287,  288,
289,  290,  292,  343,  814,  497,  499,  499,  499,  499,
499,  814,  292,  501,  501,  501,  501,  501,  502,  502,

502,  502,  503,  503,  503,  503,  503,  301,  301,  301,
301,  301,  505,  505,  505,  814,  497,  506,  506,  506,
506,  506,  508,  508,  508,  508,  508,  814,  302,  303,
304,  305,  306,  306,  307,  308,  309,  509,  509,  509,
509,  510,  510,  510,  510,  510,  292,  292,  292,  292,
292,  292,  292,  292,  814,  292,  292,  292,  814,  292,
512,  292,  814,  292,  292,  292,  292,  292,  814,  292,
814,  292,  513,  514,  814,  292,  292,  292,  292,  721,
721,  515,  292,  292,  814,  292,  814,  814,  292,  292,
292,  517,  814,  292,  292,  292,  814,  516,  292,  814,

292,  292,  292,  292,  814,  292,  292,  292,  518,  814,
292,  519,  292,  292,  292,  292,  814,  292,  520,  814,
292,  292,  292,  814,  292,  292,  292,  292,  814,  292,
292,  292,  814,  521,  522,  523,  292,  814,  524,  525,
292,  292,  292,  292,  292,  292,  292,  292,  292,  814,
292,  814,  814,  292,  814,  292,  814,  527,  292,  541,
541,  541,  814,  292,  814,  292,  526,  814,  292,  328,
328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
328,  328,  328,  528,  529,  529,  529,  529,  529,  530,

530,  530,  530,  530,  531,  531,  531,  531,  531,  534,
535,  814,  361,  202,  203,  204,  763,  496,  207,  207,
814,  362,  814,  350,  363,  814,  364,  365,  205,  207,
366,  207,  207,  814,  205,  379,  379,  594,  814,  207,
814,  814,  207,  548,  548,  548,  379,  379,  379,  379,
379,  379,  207,  605,  605,  605,  379,  542,  542,  542,
542,  542,  544,  544,  544,  544,  544,  545,  545,  545,
545,  546,  546,  546,  546,  546,  389,  390,  391,  392,
393,  393,  394,  395,  396,  388,  388,  388,  388,  388,
549,  549,  549,  549,  549,  551,  551,  551,  551,  551,

552,  552,  552,  552,  553,  553,  553,  553,  553,  379,
379,  379,  379,  379,  379,  379,  379,  814,  379,  379,
379,  814,  379,  555,  379,  814,  379,  379,  379,  379,
379,  814,  379,  814,  379,  556,  557,  814,  379,  379,
379,  379,  814,  814,  558,  379,  379,  814,  379,  814,
814,  379,  379,  379,  560,  814,  379,  379,  379,  814,
559,  379,  814,  379,  379,  379,  379,  814,  379,  379,
379,  561,  814,  379,  562,  379,  379,  379,  379,  814,
379,  563,  814,  379,  379,  379,  814,  379,  379,  379,
379,  814,  379,  379,  379,  814,  564,  565,  566,  379,

814,  567,  568,  379,  379,  379,  379,  379,  379,  379,
379,  379,  814,  379,  814,  814,  379,  814,  379,  814,
570,  379,  609,  609,  609,  609,  379,  814,  379,  569,
814,  379,  415,  415,  415,  415,  415,  415,  415,  415,
415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
415,  415,  571,  571,  571,  571,  571,  572,  572,  572,
572,  572,  573,  573,  573,  573,  573,  207,  207,  207,
207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
207,  207,  207,  207,  207,  207,  207,  574,  574,  574,
574,  574,  575,  575,  575,  575,  575,  576,  576,  576,

576,  576,  216,  216,  216,  216,  216,  216,  216,  216,
216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
216,  216,  577,  577,  577,  577,  577,  578,  578,  578,
578,  578,  579,  579,  579,  579,  579,  445,  207,  207,
207,  207,  207,  207,  242,  243,  580,  814,  581,  207,
582,  207,  814,  207,  814,  242,  243,  207,  207,  207,
814,  207,  814,  207,  207,  207,  207,  207,  207,  207,
207,  207,  207,  814,  584,  207,  814,  585,  583,  586,
207,  814,  207,  207,  207,  207,  814,  207,  207,  207,
207,  814,  207,  587,  207,  207,  207,  207,  207,  207,

207,  207,  207,  207,  207,  814,  207,  590,  207,  207,
588,  207,  814,  207,  207,  207,  207,  589,  207,  592,
814,  591,  814,  207,  814,  207,  207,  207,  604,  604,
604,  604,  604,  814,  814,  207,  814,  207,  612,  612,
612,  593,  604,  604,  604,  604,  604,  207,  594,  594,
814,  594,  594,  595,  595,  594,  594,  594,  594,  594,
594,  594,  594,  594,  594,  594,  595,  594,  594,  594,
594,  594,  594,  595,  595,  595,  595,  594,  594,  594,
594,  595,  595,  595,  595,  595,  595,  595,  595,  595,
595,  595,  595,  595,  595,  595,  595,  595,  595,  595,

594,  594,  594,  594,  594,  594,  594,  594,  594,  596,
597,  598,  599,  600,  600,  601,  602,  603,  604,  604,
604,  604,  604,  291,  471,  471,  471,  471,  471,  606,
606,  606,  606,  606,  608,  608,  608,  608,  608,  610,
610,  610,  610,  610,  291,  480,  480,  480,  480,  480,
613,  613,  613,  613,  613,  615,  615,  615,  615,  615,
616,  616,  616,  616,  617,  617,  617,  617,  617,  281,
281,  281,  281,  281,  281,  281,  281,  281,  281,  689,
689,  689,  814,  472,  473,  474,  475,  476,  476,  477,
478,  479,  281,  281,  281,  281,  281,  281,  281,  281,

281,  281,  814,  814,  481,  482,  483,  484,  485,  485,
486,  487,  488,  619,  619,  619,  619,  619,  620,  620,
620,  620,  620,  621,  621,  621,  621,  621,  622,  292,
292,  292,  292,  292,  719,  719,  719,  496,  292,  292,
292,  292,  292,  292,  292,  292,  292,  292,  496,  814,
496,  292,  292,  292,  292,  292,  623,  623,  623,  623,
623,  624,  624,  624,  624,  624,  625,  625,  625,  625,
625,  301,  301,  301,  301,  301,  301,  301,  301,  301,
301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
301,  626,  626,  626,  626,  626,  627,  627,  627,  627,

627,  628,  628,  628,  628,  628,  292,  292,  292,  292,
814,  814,  629,  292,  292,  292,  292,  292,  630,  292,
814,  631,  292,  292,  292,  814,  292,  292,  814,  292,
292,  292,  633,  292,  292,  814,  632,  292,  292,  292,
292,  634,  814,  292,  292,  292,  814,  635,  292,  814,
292,  292,  292,  292,  636,  292,  292,  292,  292,  814,
292,  292,  292,  292,  814,  292,  814,  292,  292,  292,
814,  639,  292,  292,  637,  292,  292,  292,  638,  292,
292,  292,  292,  292,  292,  814,  292,  814,  814,  640,
814,  292,  641,  814,  292,  814,  292,  814,  642,  814,

814,  292,  814,  814,  292,  594,  643,  814,  594,  594,
644,  644,  594,  594,  594,  594,  594,  594,  594,  594,
594,  594,  594,  644,  594,  594,  594,  594,  594,  594,
644,  644,  644,  644,  594,  594,  594,  594,  644,  644,
644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
644,  644,  644,  644,  644,  644,  644,  594,  594,  594,
594,  594,  594,  594,  594,  594,  645,  646,  647,  648,
649,  649,  650,  651,  652,  653,  653,  653,  653,  653,
653,  653,  653,  653,  653,  653,  653,  653,  653,  653,
379,  379,  379,  379,  379,  379,  379,  379,  379,  379,

379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
654,  654,  654,  654,  654,  655,  655,  655,  655,  655,
656,  656,  656,  656,  656,  388,  388,  388,  388,  388,
388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
388,  388,  388,  388,  388,  657,  657,  657,  657,  657,
658,  658,  658,  658,  658,  659,  659,  659,  659,  659,
379,  379,  379,  379,  814,  814,  660,  379,  379,  379,
379,  379,  661,  379,  814,  662,  379,  379,  379,  814,
379,  379,  814,  379,  379,  379,  664,  379,  379,  814,
663,  379,  379,  379,  379,  665,  814,  379,  379,  379,

814,  666,  379,  814,  379,  379,  379,  379,  667,  379,
379,  379,  379,  814,  379,  379,  379,  379,  814,  379,
814,  379,  379,  379,  814,  670,  379,  379,  668,  379,
379,  379,  669,  379,  379,  379,  379,  379,  379,  814,
379,  814,  814,  671,  814,  379,  672,  814,  379,  814,
379,  814,  673,  814,  814,  379,  814,  814,  379,  674,
674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
674,  674,  674,  674,  675,  675,  675,  675,  675,  675,
675,  675,  675,  675,  675,  675,  675,  675,  675,  676,
676,  676,  676,  676,  676,  676,  676,  676,  676,  676,

676,  676,  676,  676,  207,  207,  207,  207,  207,  207,
207,  207,  814,  207,  207,  207,  814,  207,  677,  207,
678,  207,  814,  679,  207,  207,  680,  207,  814,  207,
814,  207,  207,  207,  207,  207,  207,  814,  207,  207,
814,  814,  814,  207,  207,  207,  207,  207,  207,  207,
814,  814,  814,  207,  681,  207,  682,  683,  207,  207,
684,  207,  207,  207,  207,  207,  685,  814,  207,  686,
814,  687,  207,  814,  207,  207,  207,  207,  207,  814,
814,  814,  207,  814,  207,  814,  207,  688,  207,  595,
595,  595,  595,  595,  814,  814,  207,  814,  207,  690,

690,  690,  690,  690,  692,  692,  692,  692,  692,  693,
693,  693,  693,  694,  694,  694,  694,  694,  207,  207,
471,  471,  471,  471,  471,  723,  723,  723,  723,  207,
471,  471,  471,  471,  471,  814,  814,  814,  814,  207,
471,  471,  471,  471,  471,  471,  471,  471,  471,  471,
696,  696,  696,  696,  696,  697,  697,  697,  697,  697,
698,  698,  698,  698,  698,  480,  480,  480,  480,  480,
480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
480,  480,  480,  480,  480,  699,  699,  699,  699,  699,
700,  700,  700,  700,  700,  701,  701,  701,  701,  701,

702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
702,  702,  702,  702,  702,  622,  703,  703,  703,  703,
703,  814,  814,  814,  496,  703,  703,  703,  703,  703,
703,  703,  703,  703,  703,  496,  814,  496,  704,  704,
704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
704,  704,  704,  292,  292,  292,  292,  292,  292,  292,
292,  814,  292,  292,  292,  814,  292,  705,  292,  706,
292,  814,  707,  292,  292,  708,  292,  814,  292,  814,
292,  292,  292,  292,  292,  292,  814,  292,  292,  814,
814,  814,  292,  292,  292,  292,  292,  292,  292,  814,

814,  814,  292,  709,  292,  710,  711,  292,  292,  712,
292,  292,  292,  292,  292,  713,  814,  292,  714,  814,
715,  292,  814,  292,  292,  292,  292,  292,  814,  643,
496,  292,  814,  292,  814,  292,  716,  292,  594,  644,
644,  644,  644,  644,  814,  292,  814,  292,  814,  594,
594,  594,  718,  720,  720,  720,  720,  720,  722,  722,
722,  722,  722,  724,  724,  724,  724,  724,  292,  292,
726,  726,  726,  726,  726,  814,  814,  814,  814,  292,
814,  814,  814,  718,  726,  726,  726,  726,  726,  292,
726,  726,  726,  726,  726,  727,  727,  727,  727,  727,

727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
379,  379,  379,  379,  379,  379,  379,  379,  814,  379,
379,  379,  814,  379,  728,  379,  729,  379,  814,  730,
379,  379,  731,  379,  814,  379,  814,  379,  379,  379,
379,  379,  379,  814,  379,  379,  814,  814,  814,  379,
379,  379,  379,  379,  379,  379,  814,  814,  814,  379,
732,  379,  733,  734,  379,  379,  735,  379,  379,  379,
379,  379,  736,  814,  379,  737,  814,  738,  379,  814,
379,  379,  379,  379,  379,  379,  379,  814,  379,  814,
379,  814,  379,  739,  379,  814,  379,  207,  207,  207,

207,  814,  379,  814,  379,  814,  379,  814,  207,  814,
207,  207,  207,  207,  207,  207,  207,  814,  207,  814,
207,  814,  207,  814,  207,  814,  741,  207,  207,  814,
740,  814,  207,  814,  207,  814,  207,  814,  207,  207,
207,  814,  207,  207,  742,  207,  207,  814,  207,  814,
207,  814,  743,  207,  814,  745,  207,  207,  207,  814,
207,  207,  207,  207,  814,  744,  207,  814,  207,  207,
207,  814,  207,  814,  746,  207,  207,  814,  207,  814,
207,  748,  747,  814,  814,  814,  207,  814,  814,  814,
207,  595,  595,  595,  595,  595,  207,  595,  595,  595,

595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
595,  595,  749,  749,  749,  749,  749,  750,  750,  750,
750,  750,  751,  751,  751,  751,  751,  752,  752,  752,
752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
752,  752,  753,  753,  753,  753,  753,  753,  753,  753,
753,  753,  753,  753,  753,  753,  753,  292,  292,  292,
292,  292,  292,  814,  292,  292,  292,  292,  292,  814,
292,  814,  292,  292,  292,  292,  814,  755,  292,  814,
292,  754,  292,  814,  292,  292,  814,  292,  292,  292,
756,  292,  292,  814,  292,  292,  292,  814,  814,  292,

814,  757,  292,  814,  814,  759,  292,  292,  292,  292,
292,  292,  292,  814,  758,  814,  292,  814,  292,  292,
292,  292,  292,  292,  760,  814,  814,  814,  292,  814,
292,  761,  814,  292,  762,  644,  644,  644,  644,  644,
292,  814,  814,  292,  644,  644,  644,  644,  644,  644,
644,  644,  644,  644,  644,  644,  644,  644,  644,  764,
764,  764,  764,  764,  765,  765,  765,  765,  765,  766,
766,  766,  766,  766,  379,  379,  379,  379,  379,  379,
814,  379,  379,  379,  379,  379,  814,  379,  814,  379,
379,  379,  379,  814,  768,  379,  814,  379,  767,  379,

814,  379,  379,  814,  379,  379,  379,  769,  379,  379,
814,  379,  379,  379,  814,  814,  379,  814,  770,  379,
814,  814,  772,  379,  379,  379,  379,  379,  379,  379,
814,  771,  814,  379,  814,  379,  379,  379,  379,  379,
379,  773,  207,  207,  814,  379,  814,  379,  774,  814,
379,  775,  814,  207,  207,  207,  814,  379,  207,  207,
379,  207,  207,  207,  776,  207,  777,  207,  207,  207,
207,  207,  207,  814,  779,  207,  207,  207,  207,  207,
814,  207,  207,  207,  207,  778,  814,  207,  207,  207,
207,  207,  814,  814,  207,  814,  814,  207,  814,  814,

207,  814,  814,  814,  207,  780,  780,  780,  780,  780,
207,  780,  780,  780,  780,  780,  780,  780,  780,  780,
780,  292,  292,  292,  292,  292,  292,  292,  292,  814,
292,  292,  292,  782,  292,  814,  292,  814,  292,  292,
292,  292,  292,  781,  292,  783,  292,  814,  292,  814,
292,  292,  784,  292,  292,  292,  292,  292,  292,  814,
292,  763,  496,  814,  292,  814,  292,  814,  292,  785,
785,  785,  785,  785,  292,  814,  292,  814,  292,  814,
814,  814,  594,  785,  785,  785,  785,  785,  785,  785,
785,  785,  785,  379,  379,  379,  379,  379,  379,  379,

379,  814,  379,  379,  379,  787,  379,  814,  379,  814,
379,  379,  379,  379,  379,  786,  379,  788,  379,  814,
379,  814,  379,  379,  789,  379,  379,  379,  379,  379,
379,  814,  379,  207,  207,  814,  379,  814,  379,  814,
379,  207,  207,  790,  207,  814,  379,  814,  379,  814,
379,  814,  207,  814,  207,  207,  207,  207,  207,  292,
292,  814,  791,  292,  292,  814,  207,  814,  207,  794,
292,  814,  792,  814,  292,  814,  207,  793,  207,  814,
292,  292,  292,  814,  795,  292,  292,  814,  814,  379,
379,  814,  292,  379,  379,  814,  292,  814,  796,  798,

379,  814,  292,  814,  379,  797,  292,  379,  379,  814,
379,  379,  379,  814,  799,  207,  207,  814,  379,  814,
814,  814,  379,  814,  800,  814,  207,  814,  379,  207,
207,  801,  379,  207,  207,  814,  207,  207,  207,  814,
207,  814,  802,  814,  207,  292,  292,  803,  207,  814,
207,  292,  292,  814,  207,  814,  292,  814,  207,  292,
292,  814,  292,  814,  804,  814,  292,  292,  292,  814,
292,  814,  292,  379,  379,  379,  379,  805,  292,  814,
292,  814,  379,  379,  379,  814,  379,  814,  292,  379,
379,  207,  207,  379,  379,  806,  379,  207,  207,  807,

379,  814,  207,  379,  292,  292,  292,  292,  207,  808,
379,  814,  207,  379,  379,  292,  814,  292,  207,  379,
379,  814,  809,  814,  379,  292,  814,  292,  207,  207,
379,  810,  207,  207,  379,  292,  292,  379,  379,  207,
379,  814,  814,  207,  814,  811,  292,  814,  379,  207,
292,  292,  812,  207,  813,  814,  292,  814,  379,  379,
379,  292,  814,  814,  814,  814,  814,  814,  814,  814,
379,  292,  814,  814,  814,  814,  814,  814,  814,  814,
379,   97,   97,   97,   97,   97,   97,   97,   97,   97,
97,   97,   97,  103,  103,  103,  103,  103,  103,  103,

103,  103,  103,  103,  103,  109,  109,  109,  109,  109,
109,  109,  109,  109,  109,  109,  109,  114,  114,  114,
114,  114,  114,  114,  114,  114,  114,  114,  114,  117,
117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
117,  163,  163,  163,  163,  163,  163,  163,  163,  163,
163,  163,  163,  207,  814,  814,  814,  814,  814,  207,
216,  814,  814,  814,  814,  814,  216,  281,  281,  281,
814,  281,  281,  292,  814,  814,  814,  292,  814,  814,
814,  814,  814,  292,  301,  814,  814,  814,  814,  814,
301,  337,  337,  814,  814,  814,  337,  337,  337,  337,

337,  814,  337,  344,  344,  814,  814,  814,  344,  344,
344,  344,  344,  814,  344,  351,  351,  814,  814,  351,
351,  351,  351,  814,  351,  351,  351,  355,  355,  814,
814,  355,  355,  355,  355,  355,  355,  355,  355,  374,
814,  814,  814,  814,  374,  374,  374,  374,  814,  374,
374,  379,  814,  814,  814,  814,  814,  379,  388,  814,
814,  814,  814,  814,  388,  439,  439,  439,  439,  439,
439,  439,  439,  439,  439,  439,  443,  443,  443,  443,
443,  443,  443,  443,  443,  443,  443,  450,  450,  450,
450,  450,  450,  450,  450,  450,  450,  450,  471,  814,

814,  814,  471,  814,  814,  814,  814,  814,  471,  480,
814,  814,  814,  814,  814,  480,  496,  496,  496,  496,
496,  496,  496,  814,  496,  496,  496,  496,  594,  594,
814,  594,  594,  594,  594,  594,  594,  594,  594,  594,
717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
717,  717,   19,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,

814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814
} ;

static yyconst flex_int16_t yy_chk[4224] =
{
0,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
3,    3,    3,    4,    4,    4,  652,    3,    9,    9,
4,    5,    5,    5,    3,   10,   10,    4,    5,    6,
6,    6,    7,    7,  603,    5,    6,   32,    8,    8,
540,   32,    7,    6,   11,   11,   11,    7,    8,   12,
12,   12,  539,    8,   21,   21,   21,   37,   67,   67,
11,   37,   37,   91,   91,   12,   13,   13,   13,   13,

13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   15,   15,   15,   15,
41,   22,  538,   42,   15,   15,   43,   44,  100,   15,
23,   23,   15,  100,   22,   15,   15,   15,   15,   15,
22,   41,   41,   23,   42,  158,  158,   43,   44,   23,

25,   25,   25,   25,   25,   25,   25,   25,   25,   26,
26,   26,   26,   26,   26,   26,   26,   26,  196,  196,
15,   16,   16,   16,   16,  537,   38,  536,   38,   16,
16,   65,   65,   65,   16,   38,   38,   16,   49,   49,
16,   16,   16,   16,   16,   36,   38,   38,   36,   49,
52,   52,   36,   36,   36,  101,  535,   49,  533,   49,
101,   52,   89,   89,   89,   52,   36,   52,   36,  106,
488,   52,  211,  211,  106,   16,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   27,   27,   50,   50,
51,   51,   53,   53,   50,   63,  479,   27,  134,   50,
107,   51,  134,   53,  449,  107,   50,   27,   51,   50,
53,   51,  121,   53,   53,  144,   63,  121,   54,   54,
27,   27,   27,   27,   27,   27,   27,   27,   27,   54,
55,   55,   56,   56,   57,   57,  144,   58,   58,   54,

448,   55,   56,   56,   57,   57,   74,  171,   58,   58,
231,   55,  171,   56,  231,   57,   58,   57,   58,   59,
59,   64,   64,   64,   64,   64,   70,   70,   70,   70,
59,   59,   66,   66,   66,   66,   66,  447,  143,  446,
59,   68,   68,   68,   68,   68,   69,   69,   69,   69,
69,   71,   71,   71,   71,   71,   73,   73,   73,  143,
143,   73,   94,   94,   94,   94,   74,   74,   74,   74,
74,   74,   74,   74,   74,   75,   75,   75,   75,   75,
75,   75,   75,   75,   77,   77,   78,   78,   79,   79,
81,   81,   78,  181,  424,   77,  396,   78,  181,   79,

387,   81,  375,   77,   78,   77,   79,   78,   81,   79,
139,   81,   81,  373,  139,  139,   73,   73,   73,   73,
73,   73,   73,   73,   73,   76,   80,   80,   82,   82,
156,  156,  156,   83,   83,   84,   84,   80,  372,   82,
124,   80,  371,   80,   83,   84,   84,   80,  145,   82,
146,   76,   76,  124,   83,  154,   84,   85,   85,  124,
125,  125,   76,   86,   86,  220,  220,   85,   85,  145,
370,  146,   76,  125,   86,   86,  154,  366,   85,  125,
85,  365,   86,  357,   86,   76,   76,   76,   76,   76,
76,   76,   76,   76,   87,   87,   88,   88,   88,   88,

88,  160,  160,  160,  160,   87,   87,   90,   90,   90,
90,   90,  194,  194,  194,   87,   92,   92,   92,   92,
92,   93,   93,   93,   93,   93,   95,   95,   95,   95,
95,  123,  123,  123,  244,  309,  127,  127,  300,  242,
123,  242,  290,  123,  242,  123,  123,  127,  235,  123,
155,  155,  155,  155,  155,  244,  244,  127,  128,  128,
128,  128,  128,  128,  128,  128,  128,  129,  129,  201,
201,  201,  138,  247,  233,  138,  286,  286,  129,  138,
138,  138,  140,  232,  140,  209,  209,  209,  129,  296,
296,  140,  140,  138,  247,  138,  157,  157,  157,  157,

157,  224,  140,  140,  159,  159,  159,  159,  159,  161,
161,  161,  161,  161,  178,  178,  178,  178,  178,  178,
178,  178,  178,  179,  179,  179,  179,  179,  179,  179,
179,  179,  180,  180,  363,  182,  182,  184,  184,  183,
183,  186,  186,  180,  215,  183,  182,  203,  184,  363,
183,  200,  186,  180,  182,  184,  182,  183,  184,  186,
183,  166,  186,  186,  185,  185,  180,  180,  180,  180,
180,  180,  180,  180,  180,  185,  187,  187,  164,  185,
162,  185,  188,  188,  249,  185,  152,  187,  189,  189,
190,  190,  148,  188,  141,  191,  191,  187,  189,  189,

190,  190,  137,  188,  135,  249,  191,  191,  130,  189,
243,  190,  243,  190,  191,  243,  191,  192,  192,  193,
193,  193,  193,  193,  198,  198,  198,  198,  192,  192,
195,  195,  195,  195,  195,  218,  218,  218,  192,  197,
197,  197,  197,  197,  199,  199,  199,  199,  199,  204,
204,  204,  205,  205,  205,  120,  206,  305,  305,  207,
207,  118,  204,  383,  383,  205,  392,  392,  204,  206,
207,  205,  284,  284,  284,  206,  213,  213,  213,  213,
207,  208,  208,  208,  208,  208,  210,  210,  210,  210,
210,  212,  212,  212,  212,  212,  214,  214,  214,  214,

214,  217,  217,  217,  217,  217,  219,  219,  219,  219,
219,  221,  221,  221,  221,  221,  222,  222,  222,  222,
223,  223,  223,  223,  223,  225,  225,  226,  226,  240,
364,  251,  234,  116,  240,  240,  225,  113,  226,  234,
234,  270,  240,  240,  112,  364,  225,  240,  226,  240,
234,  234,  251,  240,  240,  241,  111,  241,  253,  253,
254,  254,  270,  108,  241,  241,  255,  255,  253,  253,
105,  254,  102,  256,  256,  241,  241,  255,   99,  253,
254,  254,   96,  255,  256,  257,  257,  255,  258,  258,
72,  259,  259,   61,  256,   46,  257,  258,   28,  258,

260,  260,  259,  261,  261,  257,  257,  262,  262,  258,
259,  260,  259,   19,  261,  263,  263,  260,  262,  262,
0,  260,  264,  264,  261,    0,  263,    0,  262,  265,
265,  475,  475,  264,    0,  263,  263,  264,  266,  266,
265,    0,  265,  264,  267,  267,  271,  271,  266,  266,
265,  268,  268,  484,  484,  267,    0,  271,    0,  266,
281,    0,  268,    0,  268,  267,    0,  271,  267,  294,
294,  294,  268,  272,  272,  272,  272,  272,  273,  273,
273,  273,  273,  274,  274,  274,  274,  274,  275,  275,
275,  275,  275,  276,  276,  276,  276,  276,  277,  277,

277,  277,  277,  278,  278,  278,  278,  278,  279,  279,
279,  279,  279,  280,  280,  280,  599,  599,  280,    0,
281,  281,  281,  281,  281,  281,  281,  281,  281,  282,
282,  282,  282,  282,  282,  282,  282,  282,  283,  283,
283,  283,  283,  285,  285,  285,  285,  285,  287,  287,
287,  287,  287,  288,  288,  288,  288,  289,  289,  289,
289,  289,  291,  293,  293,  293,  293,  293,  301,  343,
343,  292,  292,  280,  280,  280,  280,  280,  280,  280,
280,  280,  292,  343,    0,  291,  295,  295,  295,  295,
295,    0,  292,  297,  297,  297,  297,  297,  298,  298,

298,  298,  299,  299,  299,  299,  299,  302,  302,  302,
302,  302,  303,  303,  303,    0,  291,  304,  304,  304,
304,  304,  306,  306,  306,  306,  306,    0,  301,  301,
301,  301,  301,  301,  301,  301,  301,  307,  307,  307,
307,  308,  308,  308,  308,  308,  310,  310,  311,  311,
312,  312,  313,  313,    0,  315,  315,  310,    0,  311,
312,  312,    0,  313,  314,  314,  315,  310,    0,  311,
0,  312,  313,  313,    0,  314,  315,  316,  316,  648,
648,  314,  317,  317,    0,  314,    0,    0,  316,  318,
318,  317,    0,  317,  319,  319,    0,  316,  316,    0,

318,  320,  320,  317,    0,  319,  321,  321,  318,    0,
318,  319,  320,  322,  322,  319,    0,  321,  321,    0,
323,  323,  320,    0,  322,  324,  324,  321,    0,  325,
325,  323,    0,  322,  322,  323,  324,    0,  324,  325,
325,  323,  326,  326,  327,  327,  324,  328,  328,    0,
325,    0,    0,  326,    0,  327,    0,  327,  328,  381,
381,  381,    0,  326,    0,  327,  326,    0,  328,  329,
329,  329,  329,  329,  330,  330,  330,  330,  330,  331,
331,  331,  331,  331,  332,  332,  332,  332,  332,  333,
333,  333,  333,  333,  334,  334,  334,  334,  334,  335,

335,  335,  335,  335,  336,  336,  336,  336,  336,  350,
350,    0,  361,  361,  361,  367,  718,  718,  368,  368,
0,  361,    0,  350,  361,    0,  361,  361,  367,  368,
361,  369,  369,    0,  367,  379,  379,  718,    0,  368,
0,    0,  369,  390,  390,  390,  379,  380,  380,  380,
380,  380,  369,  473,  473,  473,  379,  382,  382,  382,
382,  382,  384,  384,  384,  384,  384,  385,  385,  385,
385,  386,  386,  386,  386,  386,  388,  388,  388,  388,
388,  388,  388,  388,  388,  389,  389,  389,  389,  389,
391,  391,  391,  391,  391,  393,  393,  393,  393,  393,

394,  394,  394,  394,  395,  395,  395,  395,  395,  397,
397,  398,  398,  399,  399,  400,  400,    0,  402,  402,
397,    0,  398,  399,  399,    0,  400,  401,  401,  402,
397,    0,  398,    0,  399,  400,  400,    0,  401,  402,
403,  403,    0,    0,  401,  404,  404,    0,  401,    0,
0,  403,  405,  405,  404,    0,  404,  406,  406,    0,
403,  403,    0,  405,  407,  407,  404,    0,  406,  408,
408,  405,    0,  405,  406,  407,  409,  409,  406,    0,
408,  408,    0,  410,  410,  407,    0,  409,  411,  411,
408,    0,  412,  412,  410,    0,  409,  409,  410,  411,

0,  411,  412,  412,  410,  413,  413,  414,  414,  411,
415,  415,    0,  412,    0,    0,  413,    0,  414,    0,
414,  415,  477,  477,  477,  477,  413,    0,  414,  413,
0,  415,  416,  416,  416,  416,  416,  417,  417,  417,
417,  417,  418,  418,  418,  418,  418,  419,  419,  419,
419,  419,  420,  420,  420,  420,  420,  421,  421,  421,
421,  421,  422,  422,  422,  422,  422,  425,  425,  425,
425,  425,  426,  426,  426,  426,  426,  427,  427,  427,
427,  427,  428,  428,  428,  428,  428,  429,  429,  429,
429,  429,  430,  430,  430,  430,  430,  431,  431,  431,

431,  431,  432,  432,  432,  432,  432,  433,  433,  433,
433,  433,  434,  434,  434,  434,  434,  435,  435,  435,
435,  435,  436,  436,  436,  436,  436,  437,  437,  437,
437,  437,  438,  438,  438,  438,  438,  445,  452,  452,
451,  451,  453,  453,  445,  445,  451,    0,  452,  452,
453,  451,    0,  453,    0,  445,  445,  454,  454,  452,
0,  451,    0,  453,  455,  455,  456,  456,  454,  457,
457,  458,  458,    0,  455,  455,    0,  456,  454,  458,
457,    0,  458,  459,  459,  455,    0,  456,  460,  460,
457,    0,  458,  459,  459,  461,  461,  462,  462,  460,

463,  463,  464,  464,  459,    0,  461,  462,  462,  460,
460,  463,    0,  464,  465,  465,  461,  461,  462,  464,
0,  463,    0,  464,    0,  465,  466,  466,  468,  468,
468,  468,  468,    0,    0,  465,    0,  466,  482,  482,
482,  466,  469,  469,  469,  469,  469,  466,  467,  467,
0,  467,  467,  467,  467,  467,  467,  467,  467,  467,
467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
467,  467,  467,  467,  467,  467,  467,  467,  467,  467,

467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
467,  467,  467,  467,  467,  467,  467,  467,  470,  470,
470,  470,  470,  471,  472,  472,  472,  472,  472,  474,
474,  474,  474,  474,  476,  476,  476,  476,  476,  478,
478,  478,  478,  478,  480,  481,  481,  481,  481,  481,
483,  483,  483,  483,  483,  485,  485,  485,  485,  485,
486,  486,  486,  486,  487,  487,  487,  487,  487,  489,
489,  489,  489,  489,  490,  490,  490,  490,  490,  597,
597,  597,    0,  471,  471,  471,  471,  471,  471,  471,
471,  471,  491,  491,  491,  491,  491,  492,  492,  492,

492,  492,    0,    0,  480,  480,  480,  480,  480,  480,
480,  480,  480,  493,  493,  493,  493,  493,  494,  494,
494,  494,  494,  495,  495,  495,  495,  495,  497,  498,
498,  498,  498,  498,  646,  646,  646,  497,  499,  499,
499,  499,  499,  500,  500,  500,  500,  500,  497,    0,
497,  501,  501,  501,  501,  501,  502,  502,  502,  502,
502,  503,  503,  503,  503,  503,  504,  504,  504,  504,
504,  505,  505,  505,  505,  505,  506,  506,  506,  506,
506,  507,  507,  507,  507,  507,  508,  508,  508,  508,
508,  509,  509,  509,  509,  509,  510,  510,  510,  510,

510,  511,  511,  511,  511,  511,  512,  512,  513,  513,
0,    0,  512,  514,  514,  515,  515,  512,  513,  513,
0,  514,  516,  516,  514,    0,  515,  512,    0,  513,
517,  517,  516,  516,  514,    0,  515,  518,  518,  519,
519,  517,    0,  516,  520,  520,    0,  519,  518,    0,
519,  517,  521,  521,  520,  520,  522,  522,  518,    0,
519,  523,  523,  521,    0,  520,    0,  522,  524,  524,
0,  523,  523,  521,  521,  525,  525,  522,  522,  524,
526,  526,  523,  527,  527,    0,  525,    0,    0,  524,
0,  526,  525,    0,  527,    0,  525,    0,  527,    0,

0,  526,    0,    0,  527,  528,  528,    0,  528,  528,
528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
528,  528,  528,  528,  528,  529,  529,  529,  529,  529,
530,  530,  530,  530,  530,  531,  531,  531,  531,  531,
541,  541,  541,  541,  541,  542,  542,  542,  542,  542,

543,  543,  543,  543,  543,  544,  544,  544,  544,  544,
545,  545,  545,  545,  545,  546,  546,  546,  546,  546,
547,  547,  547,  547,  547,  548,  548,  548,  548,  548,
549,  549,  549,  549,  549,  550,  550,  550,  550,  550,
551,  551,  551,  551,  551,  552,  552,  552,  552,  552,
553,  553,  553,  553,  553,  554,  554,  554,  554,  554,
555,  555,  556,  556,    0,    0,  555,  557,  557,  558,
558,  555,  556,  556,    0,  557,  559,  559,  557,    0,
558,  555,    0,  556,  560,  560,  559,  559,  557,    0,
558,  561,  561,  562,  562,  560,    0,  559,  563,  563,

0,  562,  561,    0,  562,  560,  564,  564,  563,  563,
565,  565,  561,    0,  562,  566,  566,  564,    0,  563,
0,  565,  567,  567,    0,  566,  566,  564,  564,  568,
568,  565,  565,  567,  569,  569,  566,  570,  570,    0,
568,    0,    0,  567,    0,  569,  568,    0,  570,    0,
568,    0,  570,    0,    0,  569,    0,    0,  570,  571,
571,  571,  571,  571,  572,  572,  572,  572,  572,  573,
573,  573,  573,  573,  574,  574,  574,  574,  574,  575,
575,  575,  575,  575,  576,  576,  576,  576,  576,  577,
577,  577,  577,  577,  578,  578,  578,  578,  578,  579,

579,  579,  579,  579,  580,  580,  581,  581,  582,  582,
583,  583,    0,  584,  584,  580,    0,  581,  580,  582,
582,  583,    0,  583,  584,  580,  584,  581,    0,  582,
0,  583,  585,  585,  584,  586,  586,    0,  587,  587,
0,    0,    0,  585,  588,  588,  586,  589,  589,  587,
0,    0,    0,  585,  585,  588,  586,  587,  589,  587,
588,  590,  590,  591,  591,  588,  589,    0,  589,  590,
0,  591,  590,    0,  591,  592,  592,  593,  593,    0,
0,    0,  590,    0,  591,    0,  592,  593,  593,  596,
596,  596,  596,  596,    0,    0,  592,    0,  593,  598,

598,  598,  598,  598,  600,  600,  600,  600,  600,  601,
601,  601,  601,  602,  602,  602,  602,  602,  604,  604,
605,  605,  605,  605,  605,  650,  650,  650,  650,  604,
606,  606,  606,  606,  606,    0,    0,    0,    0,  604,
607,  607,  607,  607,  607,  608,  608,  608,  608,  608,
609,  609,  609,  609,  609,  610,  610,  610,  610,  610,
611,  611,  611,  611,  611,  612,  612,  612,  612,  612,
613,  613,  613,  613,  613,  614,  614,  614,  614,  614,
615,  615,  615,  615,  615,  616,  616,  616,  616,  616,
617,  617,  617,  617,  617,  618,  618,  618,  618,  618,

619,  619,  619,  619,  619,  620,  620,  620,  620,  620,
621,  621,  621,  621,  621,  622,  623,  623,  623,  623,
623,    0,    0,    0,  622,  624,  624,  624,  624,  624,
625,  625,  625,  625,  625,  622,    0,  622,  626,  626,
626,  626,  626,  627,  627,  627,  627,  627,  628,  628,
628,  628,  628,  629,  629,  630,  630,  631,  631,  632,
632,    0,  633,  633,  629,    0,  630,  629,  631,  631,
632,    0,  632,  633,  629,  633,  630,    0,  631,    0,
632,  634,  634,  633,  635,  635,    0,  636,  636,    0,
0,    0,  634,  637,  637,  635,  638,  638,  636,    0,

0,    0,  634,  634,  637,  635,  636,  638,  636,  637,
639,  639,  640,  640,  637,  638,    0,  638,  639,    0,
640,  639,    0,  640,  641,  641,  642,  642,    0,  643,
643,  639,    0,  640,    0,  641,  642,  642,  643,  645,
645,  645,  645,  645,    0,  641,    0,  642,    0,  643,
643,  643,  643,  647,  647,  647,  647,  647,  649,  649,
649,  649,  649,  651,  651,  651,  651,  651,  653,  653,
654,  654,  654,  654,  654,    0,    0,    0,    0,  653,
0,    0,    0,  643,  655,  655,  655,  655,  655,  653,
656,  656,  656,  656,  656,  657,  657,  657,  657,  657,

658,  658,  658,  658,  658,  659,  659,  659,  659,  659,
660,  660,  661,  661,  662,  662,  663,  663,    0,  664,
664,  660,    0,  661,  660,  662,  662,  663,    0,  663,
664,  660,  664,  661,    0,  662,    0,  663,  665,  665,
664,  666,  666,    0,  667,  667,    0,    0,    0,  665,
668,  668,  666,  669,  669,  667,    0,    0,    0,  665,
665,  668,  666,  667,  669,  667,  668,  670,  670,  671,
671,  668,  669,    0,  669,  670,    0,  671,  670,    0,
671,  672,  672,  673,  673,  674,  674,    0,  670,    0,
671,    0,  672,  673,  673,    0,  674,  675,  675,  677,

677,    0,  672,    0,  673,    0,  674,    0,  675,    0,
677,  678,  678,  679,  679,  680,  680,    0,  675,    0,
677,    0,  678,    0,  679,    0,  680,  681,  681,    0,
679,    0,  678,    0,  679,    0,  680,    0,  681,  682,
682,    0,  683,  683,  681,  684,  684,    0,  681,    0,
682,    0,  682,  683,    0,  684,  684,  685,  685,    0,
682,  686,  686,  683,    0,  683,  684,    0,  685,  687,
687,    0,  686,    0,  685,  688,  688,    0,  685,    0,
687,  687,  686,    0,    0,    0,  688,    0,    0,    0,
687,  689,  689,  689,  689,  689,  688,  690,  690,  690,

690,  690,  691,  691,  691,  691,  691,  692,  692,  692,
692,  692,  693,  693,  693,  693,  693,  694,  694,  694,
694,  694,  695,  695,  695,  695,  695,  696,  696,  696,
696,  696,  697,  697,  697,  697,  697,  698,  698,  698,
698,  698,  699,  699,  699,  699,  699,  700,  700,  700,
700,  700,  701,  701,  701,  701,  701,  703,  703,  705,
705,  706,  706,    0,  707,  707,  708,  708,  703,    0,
705,    0,  706,  709,  709,  707,    0,  708,  703,    0,
705,  707,  706,    0,  709,  707,    0,  708,  710,  710,
709,  711,  711,    0,  709,  712,  712,    0,    0,  710,

0,  710,  711,    0,    0,  712,  712,  713,  713,  710,
714,  714,  711,    0,  711,    0,  712,    0,  713,  716,
716,  714,  715,  715,  713,    0,    0,    0,  713,    0,
716,  714,    0,  715,  715,  719,  719,  719,  719,  719,
716,    0,    0,  715,  720,  720,  720,  720,  720,  721,
721,  721,  721,  721,  722,  722,  722,  722,  722,  723,
723,  723,  723,  723,  724,  724,  724,  724,  724,  725,
725,  725,  725,  725,  726,  726,  728,  728,  729,  729,
0,  730,  730,  731,  731,  726,    0,  728,    0,  729,
732,  732,  730,    0,  731,  726,    0,  728,  730,  729,

0,  732,  730,    0,  731,  733,  733,  732,  734,  734,
0,  732,  735,  735,    0,    0,  733,    0,  733,  734,
0,    0,  735,  735,  736,  736,  733,  737,  737,  734,
0,  734,    0,  735,    0,  736,  739,  739,  737,  738,
738,  736,  740,  740,    0,  736,    0,  739,  737,    0,
738,  738,    0,  740,  741,  741,    0,  739,  742,  742,
738,  744,  744,  740,  740,  741,  742,  743,  743,  742,
745,  745,  744,    0,  744,  741,  746,  746,  743,  742,
0,  745,  744,  747,  747,  743,    0,  746,  743,  748,
748,  745,    0,    0,  747,    0,    0,  746,    0,    0,

748,    0,    0,    0,  747,  749,  749,  749,  749,  749,
748,  750,  750,  750,  750,  750,  751,  751,  751,  751,
751,  754,  754,  755,  755,  756,  756,  757,  757,    0,
759,  759,  754,  756,  755,    0,  756,    0,  757,  758,
758,  759,  754,  754,  755,  757,  756,    0,  757,    0,
758,  759,  758,  760,  760,  761,  761,  762,  762,    0,
758,  763,  763,    0,  760,    0,  761,    0,  762,  764,
764,  764,  764,  764,  760,    0,  761,    0,  762,    0,
0,    0,  763,  765,  765,  765,  765,  765,  766,  766,
766,  766,  766,  767,  767,  768,  768,  769,  769,  770,

770,    0,  772,  772,  767,  769,  768,    0,  769,    0,
770,  771,  771,  772,  767,  767,  768,  770,  769,    0,
770,    0,  771,  772,  771,  773,  773,  774,  774,  775,
775,    0,  771,  776,  776,    0,  773,    0,  774,    0,
775,  777,  777,  776,  776,    0,  773,    0,  774,    0,
775,    0,  777,    0,  776,  778,  778,  779,  779,  781,
781,    0,  777,  782,  782,    0,  778,    0,  779,  781,
781,    0,  778,    0,  782,    0,  778,  779,  779,    0,
781,  783,  783,    0,  782,  784,  784,    0,    0,  786,
786,    0,  783,  787,  787,    0,  784,    0,  783,  786,

786,    0,  783,    0,  787,  784,  784,  788,  788,    0,
786,  789,  789,    0,  787,  790,  790,    0,  788,    0,
0,    0,  789,    0,  788,    0,  790,    0,  788,  791,
791,  789,  789,  792,  792,    0,  790,  793,  793,    0,
791,    0,  791,    0,  792,  794,  794,  793,  793,    0,
791,  795,  795,    0,  792,    0,  794,    0,  793,  796,
796,    0,  795,    0,  795,    0,  794,  797,  797,    0,
796,    0,  795,  798,  798,  800,  800,  797,  797,    0,
796,    0,  799,  799,  798,    0,  800,    0,  797,  801,
801,  802,  802,  799,  798,  799,  800,  803,  803,  801,

801,    0,  802,  799,  804,  804,  805,  805,  803,  802,
801,    0,  802,  806,  806,  804,    0,  805,  803,  807,
807,    0,  804,    0,  806,  804,    0,  805,  808,  808,
807,  806,  811,  811,  806,  809,  809,  810,  810,  808,
807,    0,    0,  811,    0,  808,  809,    0,  810,  808,
812,  812,  809,  811,  810,    0,  809,    0,  810,  813,
813,  812,    0,    0,    0,    0,    0,    0,    0,    0,
813,  812,    0,    0,    0,    0,    0,    0,    0,    0,
813,  815,  815,  815,  815,  815,  815,  815,  815,  815,
815,  815,  815,  816,  816,  816,  816,  816,  816,  816,

816,  816,  816,  816,  816,  817,  817,  817,  817,  817,
817,  817,  817,  817,  817,  817,  817,  818,  818,  818,
818,  818,  818,  818,  818,  818,  818,  818,  818,  819,
819,  819,  819,  819,  819,  819,  819,  819,  819,  819,
819,  820,  820,  820,  820,  820,  820,  820,  820,  820,
820,  820,  820,  821,    0,    0,    0,    0,    0,  821,
822,    0,    0,    0,    0,    0,  822,  823,  823,  823,
0,  823,  823,  824,    0,    0,    0,  824,    0,    0,
0,    0,    0,  824,  825,    0,    0,    0,    0,    0,
825,  826,  826,    0,    0,    0,  826,  826,  826,  826,

826,    0,  826,  827,  827,    0,    0,    0,  827,  827,
827,  827,  827,    0,  827,  828,  828,    0,    0,  828,
828,  828,  828,    0,  828,  828,  828,  829,  829,    0,
0,  829,  829,  829,  829,  829,  829,  829,  829,  830,
0,    0,    0,    0,  830,  830,  830,  830,    0,  830,
830,  831,    0,    0,    0,    0,    0,  831,  832,    0,
0,    0,    0,    0,  832,  833,  833,  833,  833,  833,
833,  833,  833,  833,  833,  833,  834,  834,  834,  834,
834,  834,  834,  834,  834,  834,  834,  835,  835,  835,
835,  835,  835,  835,  835,  835,  835,  835,  836,    0,

0,    0,  836,    0,    0,    0,    0,    0,  836,  837,
0,    0,    0,    0,    0,  837,  838,  838,  838,  838,
838,  838,  838,    0,  838,  838,  838,  838,  839,  839,
0,  839,  839,  839,  839,  839,  839,  839,  839,  839,
840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
840,  840,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,

814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814
} ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf = 0, *yy_state_ptr = 0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/*
 *  Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 *  Copyright (C) 2008-2012 - Scilab Enterprises - Bruno JOFRET
 *
 * Copyright (C) 2012 - 2016 - Scilab Enterprises
 *
 * This file is hereby licensed under the terms of the GNU GPL v2.0,
 * pursuant to article 5.3.4 of the CeCILL v.2.1.
 * This file was originally licensed under the terms of the CeCILL v2.1,
 * and continues to be available under such terms.
 * For more information, see the COPYING file which you should have received
 * along with this program.
 *
 */

#include <stack>

#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "sci_malloc.h"
}

static std::stack<int> paren_levels;

static int comment_level = 0;
static int last_token = 0;
static int linebreak_stored_token = 0;
static bool linebreak_stored_space = FALSE;
static int exit_status = PARSE_ERROR;
static int str_opener_column = 0;
static std::string current_file;
static std::string program_name;

static std::string pstBuffer;

extern void yyerror(std::string);

#define YY_USER_ACTION                          \
    yylloc.first_column = yylloc.last_column; yylloc.last_column += yyleng;
//yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#ifdef DEV
#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#else
#define DEBUG(x) /* Nothing */
#endif

#ifdef DEV
std::string token_to_string(int);
#endif

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define SHELLMODE 7
#define BEGINID 8

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

static void yyunput (int c, char *buf_ptr  );

#ifndef yytext_ptr
static void yy_flex_strncpy (char *, yyconst char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = NULL;

static void yy_push_state (int new_state );

static void yy_pop_state (void );

static int yy_top_state (void );

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
 
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
register yy_state_type yy_current_state;
register char * yy_cp, *yy_bp;
register int yy_act;

if ( !(yy_init) )
{
    (yy_init) = 1;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    /* Create the reject buffer large enough to save one state per allowed character. */
    if ( ! (yy_state_buf) )
    {
        (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
    }
    if ( ! (yy_state_buf) )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yylex()" );
    }

    if ( ! (yy_start) )
    {
        (yy_start) = 1;    /* first start state */
    }

    if ( ! yyin )
    {
        yyin = stdin;
    }

    if ( ! yyout )
    {
        yyout = stdout;
    }

    if ( ! YY_CURRENT_BUFFER )
    {
        yyensure_buffer_stack ();
        YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin, YY_BUF_SIZE );
    }

    yy_load_buffer_state( );
}

while ( 1 )		/* loops until end-of-file is reached */
{
    yy_cp = (yy_c_buf_p);

    /* Support of yytext. */
    *yy_cp = (yy_hold_char);

    /* yy_bp points to the position in yy_ch_buf of the start of
     * the current run.
     */
    yy_bp = yy_cp;

    yy_current_state = (yy_start);
    yy_current_state += YY_AT_BOL();

    (yy_state_ptr) = (yy_state_buf);
    *(yy_state_ptr)++ = yy_current_state;

yy_match:
    do
    {
        register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        {
            yy_current_state = (int) yy_def[yy_current_state];
            if ( yy_current_state >= 815 )
            {
                yy_c = yy_meta[(unsigned int) yy_c];
            }
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
        *(yy_state_ptr)++ = yy_current_state;
        ++yy_cp;
    }
    while ( yy_base[yy_current_state] != 4153 );

yy_find_action:
    yy_current_state = *--(yy_state_ptr);
    (yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
    for ( ; ; ) /* until we find what rule we matched */
    {
        if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
        {
            yy_act = yy_acclist[(yy_lp)];
            if ( yy_act & YY_TRAILING_HEAD_MASK ||
                    (yy_looking_for_trail_begin) )
            {
                if ( yy_act == (yy_looking_for_trail_begin) )
                {
                    (yy_looking_for_trail_begin) = 0;
                    yy_act &= ~YY_TRAILING_HEAD_MASK;
                    break;
                }
            }
            else if ( yy_act & YY_TRAILING_MASK )
            {
                (yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
                (yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
            }
            else
            {
                (yy_full_match) = yy_cp;
                (yy_full_state) = (yy_state_ptr);
                (yy_full_lp) = (yy_lp);
                break;
            }
            ++(yy_lp);
            goto find_rule;
        }
        --yy_cp;
        yy_current_state = *--(yy_state_ptr);
        (yy_lp) = yy_accept[yy_current_state];
    }

    YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

    switch ( yy_act )
    {
            /* beginning of action switch */
        case 1:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp = yy_bp + 3;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
            {
                // BOM found ==> ignored
            }
            YY_BREAK
        case 2:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(BOOLTRUE);
            }
            YY_BREAK
        case 3:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(BOOLFALSE);
            }
            YY_BREAK
        case 4:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinIf);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(IF);
            }
            YY_BREAK
        case 5:
            YY_RULE_SETUP
            {
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(THEN);
            }
            YY_BREAK
        case 6:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    // Pop to step out IF
                    ParserSingleInstance::popControlStatus();
                    ParserSingleInstance::pushControlStatus(Parser::WithinElse);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(ELSE);
            }
            YY_BREAK
        case 7:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                    ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(ELSEIF);
            }
            YY_BREAK
        case 8:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(END);
            }
            YY_BREAK
        case 9:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(SELECT);
            }
            YY_BREAK
        case 10:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(SWITCH);
            }
            YY_BREAK
        case 11:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                    ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(OTHERWISE);
            }
            YY_BREAK
        case 12:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                    ParserSingleInstance::pushControlStatus(Parser::WithinCase);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(CASE);
            }
            YY_BREAK
        case 13:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(FUNCTION);
            }
            YY_BREAK
        case 14:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(ENDFUNCTION);
            }
            YY_BREAK
        case 15:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinFor);
                }
                BEGIN(INITIAL);
                return scan_throw(FOR);
            }
            YY_BREAK
        case 16:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
                }
                BEGIN(INITIAL);
                return scan_throw(WHILE);
            }
            YY_BREAK
        case 17:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(DO);
            }
            YY_BREAK
        case 18:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(BREAK);
            }
            YY_BREAK
        case 19:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(CONTINUE);
            }
            YY_BREAK
        case 20:
            YY_RULE_SETUP
            {
                ParserSingleInstance::pushControlStatus(Parser::WithinTry);
                BEGIN(INITIAL);
                return scan_throw(TRY);
            }
            YY_BREAK
        case 21:
            YY_RULE_SETUP
            {
                // Pop to step out TRY
                ParserSingleInstance::popControlStatus();
                ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
                BEGIN(INITIAL);
                return scan_throw(CATCH);
            }
            YY_BREAK
        case 22:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(RETURN);
            }
            YY_BREAK
        case 23:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(RETURN);
            }
            YY_BREAK
        case 24:
            /* rule 24 can match eol */
            YY_RULE_SETUP
            {
                BEGIN(BEGINID);
            }
            YY_BREAK

        case 25:
            YY_RULE_SETUP
            {
                wchar_t *pwText = to_wide_string(yytext);
                if (yytext != NULL && pwText == NULL)
                {
                    std::string str = "Can\'t convert \'";
                    str += yytext;
                    str += "\' to UTF-8";
                    BEGIN(INITIAL);
                    yyerror(str);
                    return scan_throw(FLEX_ERROR);
                }
                yylval.str = new std::wstring(pwText);
                FREE(pwText);
                types::InternalType * pIT = symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str));
                if (pIT && pIT->isCallable())
                {
                    scan_throw(ID);
                    BEGIN(SHELLMODE);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(ID);
                }
            }
            YY_BREAK

        case 26:
            YY_RULE_SETUP
            {
                return scan_throw(NOT);
            }
            YY_BREAK
        case 27:
            YY_RULE_SETUP
            {
                return scan_throw(DOLLAR);
            }
            YY_BREAK
        case 28:
            YY_RULE_SETUP
            {
                return scan_throw(BOOLTRUE);
            }
            YY_BREAK
        case 29:
            YY_RULE_SETUP
            {
                return scan_throw(BOOLFALSE);
            }
            YY_BREAK
        case 30:
            YY_RULE_SETUP
            {
                return scan_throw(AND);
            }
            YY_BREAK
        case 31:
            YY_RULE_SETUP
            {
                return scan_throw(ANDAND);
            }
            YY_BREAK
        case 32:
            YY_RULE_SETUP
            {
                return scan_throw(OR);
            }
            YY_BREAK
        case 33:
            YY_RULE_SETUP
            {
                return scan_throw(OROR);
            }
            YY_BREAK
        case 34:
            YY_RULE_SETUP
            {
                return scan_throw(LPAREN);
            }
            YY_BREAK
        case 35:
            YY_RULE_SETUP
            {
                return scan_throw(RPAREN);
            }
            YY_BREAK
        case 36:
            YY_RULE_SETUP
            {
                scan_step();
                return scan_throw(SEMI);
            }
            YY_BREAK
        case 37:
            YY_RULE_SETUP
            {
                scan_step();
                return scan_throw(COMMA);
            }
            YY_BREAK
        case 38:
            YY_RULE_SETUP
            {
                return scan_throw(COLON);
            }
            YY_BREAK
        case 39:
            YY_RULE_SETUP
            {
                yy_push_state(MATRIX);
                paren_levels.push(0);
                ParserSingleInstance::pushControlStatus(Parser::WithinCell);
                return scan_throw(LBRACE);
            }
            YY_BREAK
        case 40:
            YY_RULE_SETUP
            {
                return scan_throw(RBRACE);
            }
            YY_BREAK
        case 41:
            YY_RULE_SETUP
            {
                return scan_throw(DOTQUOTE);
            }
            YY_BREAK
        case 42:
            YY_RULE_SETUP
            {
                return scan_throw(DOTTIMES);
            }
            YY_BREAK
        case 43:
            YY_RULE_SETUP
            {
                return scan_throw(DOTRDIVIDE);
            }
            YY_BREAK
        case 44:
            YY_RULE_SETUP
            {
                return scan_throw(DOTLDIVIDE);
            }
            YY_BREAK
        case 45:
            YY_RULE_SETUP
            {
                return scan_throw(DOTPOWER);
            }
            YY_BREAK
        case 46:
            YY_RULE_SETUP
            {
                return scan_throw(MINUS);
            }
            YY_BREAK
        case 47:
            YY_RULE_SETUP
            {
                return scan_throw(PLUS);
            }
            YY_BREAK
        case 48:
            YY_RULE_SETUP
            {
                return scan_throw(TIMES);
            }
            YY_BREAK
        case 49:
            YY_RULE_SETUP
            {
                return scan_throw(RDIVIDE);
            }
            YY_BREAK
        case 50:
            YY_RULE_SETUP
            {
                return scan_throw(LDIVIDE);
            }
            YY_BREAK
        case 51:
            YY_RULE_SETUP
            {
                return scan_throw(POWER);
            }
            YY_BREAK
        case 52:
            YY_RULE_SETUP
            {
                return scan_throw(KRONTIMES);
            }
            YY_BREAK
        case 53:
            YY_RULE_SETUP
            {
                return scan_throw(KRONRDIVIDE);
            }
            YY_BREAK
        case 54:
            YY_RULE_SETUP
            {
                return scan_throw(KRONLDIVIDE);
            }
            YY_BREAK
        case 55:
            /* rule 55 can match eol */
            YY_RULE_SETUP
            {
                unput(yytext[yyleng - 1]);
                return scan_throw(CONTROLTIMES);
            }
            YY_BREAK
        case 56:
            /* rule 56 can match eol */
            YY_RULE_SETUP
            {
                unput(yytext[yyleng - 1]);
                return scan_throw(CONTROLRDIVIDE);
            }
            YY_BREAK
        case 57:
            /* rule 57 can match eol */
            YY_RULE_SETUP
            {
                unput(yytext[yyleng - 1]);
                return scan_throw(CONTROLLDIVIDE);
            }
            YY_BREAK
        case 58:
            YY_RULE_SETUP
            {
                return scan_throw(EQ);
            }
            YY_BREAK
        case 59:
            YY_RULE_SETUP
            {
                return scan_throw(NE);
            }
            YY_BREAK
        case 60:
            YY_RULE_SETUP
            {
                return scan_throw(LT);
            }
            YY_BREAK
        case 61:
            YY_RULE_SETUP
            {
                return scan_throw(GT);
            }
            YY_BREAK
        case 62:
            YY_RULE_SETUP
            {
                return scan_throw(LE);
            }
            YY_BREAK
        case 63:
            YY_RULE_SETUP
            {
                return scan_throw(GE);
            }
            YY_BREAK
        case 64:
            YY_RULE_SETUP
            {
                return scan_throw(ASSIGN);
            }
            YY_BREAK
        case 65:
            YY_RULE_SETUP
            {
                DEBUG("yy_push_state(MATRIX)");
                yy_push_state(MATRIX);
                paren_levels.push(0);
                ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
                return scan_throw(LBRACK);
            }
            YY_BREAK
        case 66:
            YY_RULE_SETUP
            {
                return scan_throw(RBRACK);
            }
            YY_BREAK
        case 67:
            YY_RULE_SETUP
            {
                return scan_throw(DOT);
            }
            YY_BREAK
        case 68:
            YY_RULE_SETUP
            {
                ParserSingleInstance::pushControlStatus(Parser::WithinDots);
                yy_push_state(LINEBREAK);
            }
            YY_BREAK
        case 69:
            YY_RULE_SETUP
            {
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
                //  scan_step();
                return scan_throw(VARINT);
            }
            YY_BREAK
        case 70:
            YY_RULE_SETUP
            {
                scan_exponent_convert(yytext);
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
                //scan_step();
                return scan_throw(VARFLOAT);
            }
            YY_BREAK
        case 71:
            YY_RULE_SETUP
            {
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
                //scan_step();
                return scan_throw(VARFLOAT);
            }
            YY_BREAK
        case 72:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
            {

                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] NUMBER WITH DOT AS LAST CHARACTER : " << yytext << std::endl;
#endif
                //  scan_step();
                unput('.');
                yylloc.last_column--;
                return scan_throw(NUM);
            }
            YY_BREAK
        case 73:
            YY_RULE_SETUP
            {
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
                //  scan_step();
                return scan_throw(NUM);
            }
            YY_BREAK
        case 74:
            YY_RULE_SETUP
            {
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
                //  scan_step();
                return scan_throw(NUM);
            }
            YY_BREAK
        case 75:
            YY_RULE_SETUP
            {
                wchar_t *pwText = to_wide_string(yytext);
                if (yytext != NULL && pwText == NULL)
                {
                    std::string str = "Can\'t convert \'";
                    str += yytext;
                    str += "\' to UTF-8";
                    BEGIN(INITIAL);
                    yyerror(str);
                    return scan_throw(FLEX_ERROR);
                }
                yylval.str = new std::wstring(pwText);
                FREE(pwText);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
                //  scan_step();
                return scan_throw(ID);
            }
            YY_BREAK
        case 76:
            YY_RULE_SETUP
            {
                yylval.comment = new std::wstring();
                comment_level = 1;
                ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
                yy_push_state(REGIONCOMMENT);
            }
            YY_BREAK
        case 77:
            YY_RULE_SETUP
            {
                pstBuffer.clear();
                yy_push_state(LINECOMMENT);
            }
            YY_BREAK
        case 78:
            YY_RULE_SETUP
            {
                pstBuffer.clear();
                str_opener_column = yylloc.first_column;
                yy_push_state(DOUBLESTRING);
            }
            YY_BREAK
        case 79:
            YY_RULE_SETUP
            {
                /*
                ** Matrix Transposition special behaviour
                ** ID' []' toto()' are transposition call
                */
                if (last_token == ID
                || last_token == RBRACK
                || last_token == RPAREN
                || last_token == RBRACE
                || last_token == VARINT
                || last_token == VARFLOAT
                || last_token == NUM
                || last_token == BOOLTRUE
                || last_token == BOOLFALSE)
                {
                    return scan_throw(QUOTE);
                }
                else
                {
                    pstBuffer.clear();
                    str_opener_column = yylloc.first_column;
                    yy_push_state(SIMPLESTRING);
                }
            }
            YY_BREAK
        case 80:
            YY_RULE_SETUP
            {
                scan_step();
            }
            YY_BREAK
        case 81:
            /* rule 81 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                if (last_token != EOL)
                {
                    return scan_throw(EOL);
                }

            }
            YY_BREAK
        case 82:
            /* rule 82 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                if (last_token != EOL)
                {
                    return scan_throw(EOL);
                }
                scan_throw(EOL);
            }
            YY_BREAK
        case 83:
            /* rule 83 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 2;
                yylloc.last_column = 1;
                scan_step();
                if (last_token != EOL)
                {
                    return scan_throw(EOL);
                }
                scan_throw(EOL);
            }
            YY_BREAK
        case 84:
            YY_RULE_SETUP
            {
                std::string str = "Unexpected token \'";
                str += yytext;
                str += "\'";
                BEGIN(INITIAL);
                yyerror(str);
                return scan_throw(FLEX_ERROR);
            }
            YY_BREAK

        case 85:
            YY_RULE_SETUP
            {
                ++paren_levels.top();
                return scan_throw(LPAREN);
            }
            YY_BREAK
        case 86:
            YY_RULE_SETUP
            {
                --paren_levels.top();
                return scan_throw(RPAREN);
            }
            YY_BREAK
        case 87:
            YY_RULE_SETUP
            {
                unput(yytext[yyleng - 1]);
                if (last_token == ID
                || last_token == RPAREN
                || last_token == QUOTE
                || last_token == VARINT
                || last_token == VARFLOAT
                || last_token == NUM)
                {
                    return scan_throw(COMMA);
                }
            }
            YY_BREAK
        case 88:
            YY_RULE_SETUP
            {
                return scan_throw(COLON);
            }
            YY_BREAK
        case 89:
            /* rule 89 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                if (last_token != DOTS && last_token != EOL)
                {
                    return scan_throw(EOL);
                }
                scan_throw(EOL);
            }
            YY_BREAK
        case 90:
            YY_RULE_SETUP
            {
                DEBUG("yy_pop_state()");
                yy_pop_state();
                paren_levels.pop();
                ParserSingleInstance::popControlStatus();
                return scan_throw(RBRACK);
            }
            YY_BREAK
        case 91:
            YY_RULE_SETUP
            {
                yy_pop_state();
                paren_levels.pop();
                ParserSingleInstance::popControlStatus();
                return scan_throw(RBRACE);
            }
            YY_BREAK
        case 92:
        case 93:
            YY_RULE_SETUP
            {
                // _+_ is always meaning a PLUS token
                // + alone is a plus if and only if it does not
                // fall into the {spaces}{plus} rule (in matrices space is coding)
                // as Flex is greedy the {plus} rule is only applied
                // if no {spaces}{plus} is found
                // Examples:
                // ========
                // [1 + 2 3] must be understood as [(1+2), 3]
                // [1 +2 3] must be understood as [1, 2, 3]
                // [1 +...
                // 2] must be understood as [(1+2)]
                return scan_throw(PLUS);
            }
            YY_BREAK
        case 94:
        case 95:
            YY_RULE_SETUP
            {
                // _-_ is always meaning a MINUS token
                // - alone is a MINUS only if and only if it does not
                // fall into the {spaces}{minus} rule (in matrices space is coding)
                // as Flex is greedy the {minus} rule is only applied
                // if no {spaces}{minus} is found
                // Examples:
                // ========
                // [1 - 2 3] must be understood as [(1-2), 3]
                // [1 -2 3] must be understood as [1, -2, 3]
                // [1 -...
                // 2] must be understood as [(1-2)]
                return scan_throw(MINUS);
            }
            YY_BREAK
        case 96:
            YY_RULE_SETUP
            {
                // This rule is made to take into account the coding spaces in matrices.
                // It is important to distinguish between a space coding a matrix column separator
                // and a simple non coding space around the PLUS operator
                // Examples
                // ========
                // [a + b] == [(a + b)]
                // but [a +b] == [a, b] and plus here is unary
                // the space is non coding:
                // * after any other binary operator __op__
                //   Example : [a __op__ +b]
                // * after brackets or parentheses delimiters
                //   Example : [(1*2*a) +3]
                // * at the beginning of a line
                //   Example : [3 ...
                //              _+2]

                // no need to unput the '+'
                if (last_token != LBRACK
                && last_token != EOL
                && last_token != SEMI
                && last_token != COMMA
                && last_token != DOTTIMES
                && last_token != DOTRDIVIDE
                && last_token != DOTLDIVIDE
                && last_token != DOTPOWER
                && last_token != MINUS
                && last_token != PLUS
                && last_token != TIMES
                && last_token != RDIVIDE
                && last_token != LDIVIDE
                && last_token != POWER
                && last_token != KRONTIMES
                && last_token != KRONRDIVIDE
                && last_token != KRONLDIVIDE
                && last_token != EQ
                && last_token != NE
                && last_token != LT
                && last_token != GT
                && last_token != LE
                && last_token != GE
                && paren_levels.top() == 0)
                {
                    return scan_throw(COMMA);
                }
                else
                {
                    unput('+');
                    yylloc.last_column--;
                }
            }
            YY_BREAK
        case 97:
            YY_RULE_SETUP
            {
                // See {spaces}{plus} rule for the rationale

                unput('-');
                yylloc.last_column--;
                if (last_token != LBRACK
                && last_token != EOL
                && last_token != SEMI
                && last_token != COMMA
                && last_token != DOTTIMES
                && last_token != DOTRDIVIDE
                && last_token != DOTLDIVIDE
                && last_token != DOTPOWER
                && last_token != MINUS
                && last_token != PLUS
                && last_token != TIMES
                && last_token != RDIVIDE
                && last_token != LDIVIDE
                && last_token != POWER
                && last_token != KRONTIMES
                && last_token != KRONRDIVIDE
                && last_token != KRONLDIVIDE
                && last_token != EQ
                && last_token != NE
                && last_token != LT
                && last_token != GT
                && last_token != LE
                && last_token != GE
                && paren_levels.top() == 0)
                {
                    return scan_throw(COMMA);
                }
            }
            YY_BREAK
        case 98:
            YY_RULE_SETUP
            {
                std::string str = "Unexpected token \'";
                str += yytext;
                str += "\' within a matrix.";
                BEGIN(INITIAL);
                yyerror(str);
                return scan_throw(FLEX_ERROR);
            }
            YY_BREAK
            /* {next} rules
               * ============
               * Scilab can perform a line continuation with the ..
               * In matrices as space may be coding extra care must be taken when parsing {next}
               * Some states must be preserved to parse next line and to revert to a proper state
               * after the ... // comments or ... \/* comments *\/
               */
        case 99:
            YY_RULE_SETUP
            {
                // This rule is made to take into account a +... without spaces after plus
                // if one simply ignores the next a situation like this could arise
                // Example
                // =======
                // A = [1 +...
                // 2]
                //
                // what is meant by the user [1 +2] ? or [1 + 2]
                // simply ignoring the ... would yield the 1st situation [1, 2]
                // We consider this is NOT proper and instead that the user meant a binary plus
                // split is two lines
                // The same rationale applies to minus.

                linebreak_stored_space = FALSE; // no spaces before ...
                linebreak_stored_token = PLUS; // keep last token to restore
                ParserSingleInstance::pushControlStatus(Parser::WithinDots);
                yy_push_state(LINEBREAK);
                return scan_throw(PLUS);
            }
            YY_BREAK
        case 100:
            YY_RULE_SETUP
            {
                // see {spaces}*{minus}{next} for the rationale

                linebreak_stored_space = FALSE; // no spaces before ...
                linebreak_stored_token = MINUS; // keep last token to restore
                ParserSingleInstance::pushControlStatus(Parser::WithinDots);
                yy_push_state(LINEBREAK);
                return scan_throw(MINUS);
            }
            YY_BREAK
        case 101:
            YY_RULE_SETUP
            {
                // Store the state of the previously scanned token for next rule
                // Only considerations of coding spaces is important for the parser

                linebreak_stored_space = FALSE; // no spaces before ...
                linebreak_stored_token = last_token; // keep last token to restore state
                ParserSingleInstance::pushControlStatus(Parser::WithinDots);
                yy_push_state(LINEBREAK);
            }
            YY_BREAK
        case 102:
            YY_RULE_SETUP
            {
                // Store the state of the previously scanned token for next rule
                // Only considerations of coding spaces is important for the parser

                linebreak_stored_space = TRUE; // no spaces before ...
                linebreak_stored_token = last_token; // keep last token to restore state
                ParserSingleInstance::pushControlStatus(Parser::WithinDots);
                yy_push_state(LINEBREAK);
            }
            YY_BREAK
        case YY_STATE_EOF(MATRIX):
        {
            yy_pop_state();
            paren_levels.pop();
        }
        YY_BREAK

        case 103:
            /* rule 103 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                last_token = linebreak_stored_token;
                if (linebreak_stored_space)
                {
                    // This is important to restore coding spaces as if ... was not present
                    unput(' ');
                    linebreak_stored_space = FALSE;
                }
                yy_pop_state();
                ParserSingleInstance::popControlStatus();
            }
            YY_BREAK
        case 104:
            YY_RULE_SETUP
            {
                yylval.comment = new std::wstring();
                comment_level = 1;
                ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
                yy_push_state(REGIONCOMMENT);
            }
            YY_BREAK
        case 105:
            YY_RULE_SETUP
            {
                scan_throw(DOTS);
                pstBuffer.clear();
                yy_push_state(LINECOMMENT);
            }
            YY_BREAK
        case 106:
            YY_RULE_SETUP
            {
                /* Do nothing... */
            }
            YY_BREAK
        case YY_STATE_EOF(LINEBREAK):
        {
            yy_pop_state();
        }
        YY_BREAK
        case 107:
            YY_RULE_SETUP
            {
                // The following case is not handled by the parser
                // a line of code ... /* some multiline
                // comments */ continued here;
                // without the special case telling we are after comments
                // will generate the error as follows:

                // Any characters after ... yields to an error
                std::string str = "Unexpected token \'";
                str += yytext;
                str += "\' after line break with .. or ...";
                yy_pop_state();
                ParserSingleInstance::popControlStatus();
                BEGIN(INITIAL);
                yyerror(str);
                return scan_throw(FLEX_ERROR);
            }
            YY_BREAK

        case 108:
            /* rule 108 can match eol */
            YY_RULE_SETUP
            {
                //yylloc.last_line += 1;
                //yylloc.last_column = 1;
                //scan_step();
                yy_pop_state();
                for (int i = yyleng - 1 ; i >= 0 ; --i)
                {
                    //std::cerr << "Unputting i = {" << i << "}" << std::endl;
                    //std::cerr << "Unputting {" << yytext[i] << "}" << std::endl;
                    unput(yytext[i]);
                    yylloc.last_column--;
                }
                /*
                ** To forgot comments after lines break
                */
                if (last_token != DOTS)
                {
                    //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
                    //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
                    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
                    //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
                    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
                    {
                        pstBuffer.clear();
                        std::string str = "Can\'t convert \'";
                        str += pstBuffer.c_str();
                        str += "\' to UTF-8";
                        BEGIN(INITIAL);
                        yyerror(str);
                        return scan_throw(FLEX_ERROR);
                    }
                    yylval.comment = new std::wstring(pwstBuffer);
                    pstBuffer.clear();
                    FREE (pwstBuffer);
                    return scan_throw(COMMENT);
                }
                else
                {
                    pstBuffer.clear();
                }
            }
            YY_BREAK
        case YY_STATE_EOF(LINECOMMENT):
        {
            yy_pop_state();
            wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
            if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
            {
                pstBuffer.clear();
                std::string str = "Can\'t convert \'";
                str += pstBuffer.c_str();
                str += "\' to UTF-8";
                BEGIN(INITIAL);
                yyerror(str);
                return scan_throw(FLEX_ERROR);
            }
            yylval.comment = new std::wstring(pwstBuffer);
            pstBuffer.clear();
            FREE (pwstBuffer);
            return scan_throw(COMMENT);
        }
        YY_BREAK
        case 109:
            YY_RULE_SETUP
            {
                // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
                // only translate to WCHAR_T when popping state.
                pstBuffer += yytext;
            }
            YY_BREAK

        case 110:
            YY_RULE_SETUP
            {
                --comment_level;
                if (comment_level == 0)
                {
                    ParserSingleInstance::popControlStatus();
                    yy_pop_state();
                    //return scan_throw(BLOCKCOMMENT);
                }
            }
            YY_BREAK
        case 111:
            YY_RULE_SETUP
            {
                ++comment_level;
                yy_push_state(REGIONCOMMENT);
            }
            YY_BREAK
        case 112:
            /* rule 112 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                *yylval.comment += L"\n//";
            }
            YY_BREAK
        case 113:
        case 114:
            YY_RULE_SETUP
            {
                wchar_t *pwText = to_wide_string(yytext);
                *yylval.comment += std::wstring(pwText);
                FREE(pwText);
            }
            YY_BREAK
        case YY_STATE_EOF(REGIONCOMMENT):
        {
            yy_pop_state();
            //    std::string str = "unexpected end of file in a comment";
            //    scan_error(str);
        }
        YY_BREAK

        case 115:
            YY_RULE_SETUP
            {
                pstBuffer += "\"";
            }
            YY_BREAK
        case 116:
            YY_RULE_SETUP
            {
                pstBuffer += "'";
            }
            YY_BREAK
        case 117:
            YY_RULE_SETUP
            {
                pstBuffer += "\"";
            }
            YY_BREAK
        case 118:
            YY_RULE_SETUP
            {
                pstBuffer += "'";
            }
            YY_BREAK
        case 119:
            YY_RULE_SETUP
            {
                yy_pop_state();
                //scan_step();
                wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
                if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
                {
                    pstBuffer.clear();
                    std::string str = "Can\'t convert \'";
                    str += pstBuffer.c_str();
                    str += "\' to UTF-8";
                    BEGIN(INITIAL);
                    yyerror(str);
                    return scan_throw(FLEX_ERROR);
                }
                yylval.str = new std::wstring(pwstBuffer);
                pstBuffer.clear();
                FREE(pwstBuffer);
                yylloc.first_column = str_opener_column;
                return scan_throw(STR);
            }
            YY_BREAK
        case 120:
            YY_RULE_SETUP
            {
                pstBuffer.clear();
                BEGIN(INITIAL);
                yyerror("Heterogeneous string detected, starting with \' and ending with \".");
                return scan_throw(FLEX_ERROR);
            }
            YY_BREAK
        case 121:
            /* rule 121 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                /* Do nothing... Just skip */
            }
            YY_BREAK
        case 122:
            /* rule 122 can match eol */
            YY_RULE_SETUP
            {
                pstBuffer.clear();
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                BEGIN(INITIAL);
                yyerror("Unexpected end of line in a string.");
                return scan_throw(FLEX_ERROR);
            }
            YY_BREAK
        case YY_STATE_EOF(SIMPLESTRING):
        {
            pstBuffer.clear();
            BEGIN(INITIAL);
            yyerror("Unexpected end of file in a string.");
            return scan_throw(FLEX_ERROR);
        }
        YY_BREAK
        case 123:
        case 124:
            YY_RULE_SETUP
            {
                //scan_step();
                pstBuffer += yytext;
            }
            YY_BREAK

        case 125:
            YY_RULE_SETUP
            {
                pstBuffer += "\"";
            }
            YY_BREAK
        case 126:
            YY_RULE_SETUP
            {
                pstBuffer += "'";
            }
            YY_BREAK
        case 127:
            YY_RULE_SETUP
            {
                pstBuffer += "\"";
            }
            YY_BREAK
        case 128:
            YY_RULE_SETUP
            {
                pstBuffer += "'";
            }
            YY_BREAK
        case 129:
            YY_RULE_SETUP
            {
                yy_pop_state();
                //scan_step();
                wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
                if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
                {
                    pstBuffer.clear();
                    std::string str = "Can\'t convert \'";
                    str += pstBuffer.c_str();
                    str += "\' to UTF-8";
                    BEGIN(INITIAL);
                    yyerror(str);
                    return scan_throw(FLEX_ERROR);
                }
                yylval.str = new std::wstring(pwstBuffer);
                pstBuffer.clear();
                FREE(pwstBuffer);
                yylloc.first_column = str_opener_column;
                return scan_throw(STR);
            }
            YY_BREAK
        case 130:
            YY_RULE_SETUP
            {
                pstBuffer.clear();
                BEGIN(INITIAL);
                yyerror("Heterogeneous string detected, starting with \" and ending with \'.");
                return scan_throw(FLEX_ERROR);
            }
            YY_BREAK
        case 131:
            /* rule 131 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                /* Do nothing... Just skip */
            }
            YY_BREAK
        case 132:
            /* rule 132 can match eol */
            YY_RULE_SETUP
            {
                pstBuffer.clear();
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                BEGIN(INITIAL);
                yyerror("Unexpected end of line in a string.");
                return scan_throw(FLEX_ERROR);
            }
            YY_BREAK
        case YY_STATE_EOF(DOUBLESTRING):
        {
            pstBuffer.clear();
            BEGIN(INITIAL);
            yyerror("Unexpected end of file in a string.");
            return scan_throw(FLEX_ERROR);
        }
        YY_BREAK
        case 133:
        case 134:
            YY_RULE_SETUP
            {
                //scan_step();
                pstBuffer += yytext;
            }
            YY_BREAK

        case 135:
            YY_RULE_SETUP
            {
                if (last_token == ID)
                {
                    scan_throw(SPACES);
                    return ID;
                }
            }
            YY_BREAK
        case 136:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                scan_step();
                return scan_throw(SEMI);
            }
            YY_BREAK
        case 137:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                scan_step();
                return scan_throw(COMMA);
            }
            YY_BREAK
        case 138:
            /* rule 138 can match eol */
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                return scan_throw(EOL);
            }
            YY_BREAK
        case 139:
            YY_RULE_SETUP
            {
                if (last_token == STR || last_token == SPACES)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(ASSIGN);
                }
            }
            YY_BREAK
        case 140:
            YY_RULE_SETUP
            {
                if (last_token == STR || last_token == SPACES)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(LPAREN);
                }
            }
            YY_BREAK
        case 141:
            YY_RULE_SETUP
            {
                if (last_token == STR || last_token == SPACES)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(LT);
                }
            }
            YY_BREAK
        case 142:
            YY_RULE_SETUP
            {
                if (last_token == STR || last_token == SPACES)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(GT);
                }
            }
            YY_BREAK
        case 143:
            YY_RULE_SETUP
            {
                if (last_token == STR || last_token == SPACES)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(NOT);
                }
            }
            YY_BREAK
        case 144:
            YY_RULE_SETUP
            {
                wchar_t *pwText = to_wide_string(yytext);
                yylval.str = new std::wstring(pwText);
                FREE(pwText);
                return scan_throw(STR);
            }
            YY_BREAK
        case YY_STATE_EOF(SHELLMODE):
        {
            BEGIN(INITIAL);
        }
        YY_BREAK

        case 145:
            YY_RULE_SETUP
            ECHO;
            YY_BREAK
        case YY_STATE_EOF(INITIAL):
        case YY_STATE_EOF(BEGINID):
            yyterminate();

        case YY_END_OF_BUFFER:
        {
            /* Amount of text matched not including the EOB char. */
            int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

            /* Undo the effects of YY_DO_BEFORE_ACTION. */
            *yy_cp = (yy_hold_char);
            YY_RESTORE_YY_MORE_OFFSET

            if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
            {
                /* We're scanning a new file or input source.  It's
                 * possible that this happened because the user
                 * just pointed yyin at a new source and called
                 * yylex().  If so, then we have to assure
                 * consistency between YY_CURRENT_BUFFER and our
                 * globals.  Here is the right place to do so, because
                 * this is the first action (other than possibly a
                 * back-up) that will match for the new input source.
                 */
                (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
                YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
                YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
            }

            /* Note that here we test for yy_c_buf_p "<=" to the position
             * of the first EOB in the buffer, since yy_c_buf_p will
             * already have been incremented past the NUL character
             * (since all states make transitions on EOB to the
             * end-of-buffer state).  Contrast this with the test
             * in input().
             */
            if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
            {
                /* This was really a NUL. */
                yy_state_type yy_next_state;

                (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state(  );

                /* Okay, we're now positioned to make the NUL
                 * transition.  We couldn't have
                 * yy_get_previous_state() go ahead and do it
                 * for us because it doesn't know how to deal
                 * with the possibility of jamming (and we don't
                 * want to build jamming into it because then it
                 * will run more slowly).
                 */

                yy_next_state = yy_try_NUL_trans( yy_current_state );

                yy_bp = (yytext_ptr) + YY_MORE_ADJ;

                if ( yy_next_state )
                {
                    /* Consume the NUL. */
                    yy_cp = ++(yy_c_buf_p);
                    yy_current_state = yy_next_state;
                    goto yy_match;
                }

                else
                {
                    yy_cp = (yy_c_buf_p);
                    goto yy_find_action;
                }
            }

            else switch ( yy_get_next_buffer(  ) )
                {
                    case EOB_ACT_END_OF_FILE:
                    {
                        (yy_did_buffer_switch_on_eof) = 0;

                        if ( yywrap( ) )
                        {
                            /* Note: because we've taken care in
                             * yy_get_next_buffer() to have set up
                             * yytext, we can now set up
                             * yy_c_buf_p so that if some total
                             * hoser (like flex itself) wants to
                             * call the scanner after we return the
                             * YY_NULL, it'll still work - another
                             * YY_NULL will get returned.
                             */
                            (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                            yy_act = YY_STATE_EOF(YY_START);
                            goto do_action;
                        }

                        else
                        {
                            if ( ! (yy_did_buffer_switch_on_eof) )
                            {
                                YY_NEW_FILE;
                            }
                        }
                        break;
                    }

                    case EOB_ACT_CONTINUE_SCAN:
                        (yy_c_buf_p) =
                            (yytext_ptr) + yy_amount_of_matched_text;

                        yy_current_state = yy_get_previous_state(  );

                        yy_cp = (yy_c_buf_p);
                        yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                        goto yy_match;

                    case EOB_ACT_LAST_MATCH:
                        (yy_c_buf_p) =
                            &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                        yy_current_state = yy_get_previous_state(  );

                        yy_cp = (yy_c_buf_p);
                        yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                        goto yy_find_action;
                }
            break;
        }

        default:
            YY_FATAL_ERROR(
                "fatal flex scanner internal error--no action found" );
    } /* end of action switch */
} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
register char *source = (yytext_ptr);
register int number_to_move, i;
int ret_val;

if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
    YY_FATAL_ERROR(
        "fatal flex scanner internal error--end of buffer missed" );

if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
{
    /* Don't try to fill the buffer, so this is an EOF. */
    if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
    {
        /* We matched a single character, the EOB, so
         * treat this as a final EOF.
         */
        return EOB_ACT_END_OF_FILE;
    }

    else
    {
        /* We matched some text prior to the EOB, first
         * process it.
         */
        return EOB_ACT_LAST_MATCH;
    }
}

/* Try to read more data. */

/* First move last chars to start of buffer. */
number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

for ( i = 0; i < number_to_move; ++i )
{
    *(dest++) = *(source++);
}

if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
{
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
}

else
{
    int num_to_read =
        YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

    while ( num_to_read <= 0 )
    {
        /* Not enough room in the buffer - grow it. */

        YY_FATAL_ERROR(
            "input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

    }

    if ( num_to_read > YY_READ_BUF_SIZE )
    {
        num_to_read = YY_READ_BUF_SIZE;
    }

    /* Read in more data. */
    YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
              (yy_n_chars), (size_t) num_to_read );

    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
}

if ( (yy_n_chars) == 0 )
{
    if ( number_to_move == YY_MORE_ADJ )
    {
        ret_val = EOB_ACT_END_OF_FILE;
        yyrestart(yyin  );
    }

    else
    {
        ret_val = EOB_ACT_LAST_MATCH;
        YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
            YY_BUFFER_EOF_PENDING;
    }
}

else
{
    ret_val = EOB_ACT_CONTINUE_SCAN;
}

if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size)
{
    /* Extend the array by 50%, plus the number we really need. */
    yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size  );
    if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
    }
}

(yy_n_chars) += number_to_move;
YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state (void)
{
register yy_state_type yy_current_state;
register char *yy_cp;

yy_current_state = (yy_start);
yy_current_state += YY_AT_BOL();

(yy_state_ptr) = (yy_state_buf);
*(yy_state_ptr)++ = yy_current_state;

for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
{
    register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
    {
        yy_current_state = (int) yy_def[yy_current_state];
        if ( yy_current_state >= 815 )
        {
            yy_c = yy_meta[(unsigned int) yy_c];
        }
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    *(yy_state_ptr)++ = yy_current_state;
}

return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
register int yy_is_jam;

register YY_CHAR yy_c = 1;
while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
{
    yy_current_state = (int) yy_def[yy_current_state];
    if ( yy_current_state >= 815 )
    {
        yy_c = yy_meta[(unsigned int) yy_c];
    }
}
yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
yy_is_jam = (yy_current_state == 814);
if ( ! yy_is_jam )
{
    *(yy_state_ptr)++ = yy_current_state;
}

return yy_is_jam ? 0 : yy_current_state;
}

static void yyunput (int c, register char * yy_bp )
{
register char *yy_cp;

yy_cp = (yy_c_buf_p);

/* undo effects of setting up yytext */
*yy_cp = (yy_hold_char);

if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
{
    /* need to shift things up to make room */
    /* +2 for EOB chars. */
    register int number_to_move = (yy_n_chars) + 2;
    register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
                              YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
    register char *source =
        &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

    while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
    {
        *--dest = *--source;
    }

    yy_cp += (int) (dest - source);
    yy_bp += (int) (dest - source);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
        (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

    if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
    {
        YY_FATAL_ERROR( "flex scanner push-back overflow" );
    }
}

*--yy_cp = (char) c;

(yytext_ptr) = yy_bp;
(yy_hold_char) = *yy_cp;
(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput (void)
#else
static int input  (void)
#endif

{
    int c;

    *(yy_c_buf_p) = (yy_hold_char);

    if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
    {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
            /* This was really a NUL. */
        {
            *(yy_c_buf_p) = '\0';
        }

        else
        {
            /* need more input */
            int offset = (yy_c_buf_p) - (yytext_ptr);
            ++(yy_c_buf_p);

            switch ( yy_get_next_buffer(  ) )
            {
                case EOB_ACT_LAST_MATCH:
                    /* This happens because yy_g_n_b()
                     * sees that we've accumulated a
                     * token and flags that we need to
                     * try matching the token before
                     * proceeding.  But for input(),
                     * there's no matching to consider.
                     * So convert the EOB_ACT_LAST_MATCH
                     * to EOB_ACT_END_OF_FILE.
                     */

                    /* Reset buffer status. */
                    yyrestart(yyin );

                    /*FALLTHROUGH*/

                case EOB_ACT_END_OF_FILE:
                {
                    if ( yywrap( ) )
                    {
                        return EOF;
                    }

                    if ( ! (yy_did_buffer_switch_on_eof) )
                    {
                        YY_NEW_FILE;
                    }
#ifdef __cplusplus
                    return yyinput();
#else
                    return input();
#endif
                }

                case EOB_ACT_CONTINUE_SCAN:
                    (yy_c_buf_p) = (yytext_ptr) + offset;
                    break;
            }
        }
    }

    c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
    *(yy_c_buf_p) = '\0';	/* preserve yytext */
    (yy_hold_char) = *++(yy_c_buf_p);

    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

    return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyrestart  (FILE * input_file )
{

    if ( ! YY_CURRENT_BUFFER )
    {
        yyensure_buffer_stack ();
        YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin, YY_BUF_SIZE );
    }

    yy_init_buffer(YY_CURRENT_BUFFER, input_file );
    yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{

    /* TODO. We should be able to replace this entire function body
     * with
     *		yypop_buffer_state();
     *		yypush_buffer_state(new_buffer);
     */
    yyensure_buffer_stack ();
    if ( YY_CURRENT_BUFFER == new_buffer )
    {
        return;
    }

    if ( YY_CURRENT_BUFFER )
    {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p) = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    YY_CURRENT_BUFFER_LVALUE = new_buffer;
    yy_load_buffer_state( );

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    (yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
    yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
    (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
    if ( ! b )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
    }

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
    if ( ! b->yy_ch_buf )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
    }

    b->yy_is_our_buffer = 1;

    yy_init_buffer(b, file );

    return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
void yy_delete_buffer (YY_BUFFER_STATE  b )
{

    if ( ! b )
    {
        return;
    }

    if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
    {
        YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
    }

    if ( b->yy_is_our_buffer )
    {
        yyfree((void *) b->yy_ch_buf  );
    }

    yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
int oerrno = errno;

yy_flush_buffer(b );

b->yy_input_file = file;
b->yy_fill_buffer = 1;

/* If b is the current buffer, then yy_init_buffer was _probably_
 * called from yyrestart() or through yy_get_next_buffer.
 * In that case, we don't want to reset the lineno or column.
 */
if (b != YY_CURRENT_BUFFER)
{
    b->yy_bs_lineno = 1;
    b->yy_bs_column = 0;
}

b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;

errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void yy_flush_buffer (YY_BUFFER_STATE  b )
{
if ( ! b )
{
    return;
}

b->yy_n_chars = 0;

/* We always need two end-of-buffer characters.  The first causes
 * a transition to the end-of-buffer state.  The second causes
 * a jam in that state.
 */
b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

b->yy_buf_pos = &b->yy_ch_buf[0];

b->yy_at_bol = 1;
b->yy_buffer_status = YY_BUFFER_NEW;

if ( b == YY_CURRENT_BUFFER )
{
    yy_load_buffer_state( );
}
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
if (new_buffer == NULL)
{
    return;
}

yyensure_buffer_stack();

/* This block is copied from yy_switch_to_buffer. */
if ( YY_CURRENT_BUFFER )
{
    /* Flush out information for old buffer. */
    *(yy_c_buf_p) = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
}

/* Only push if top exists. Otherwise, replace top. */
if (YY_CURRENT_BUFFER)
{
    (yy_buffer_stack_top)++;
}
YY_CURRENT_BUFFER_LVALUE = new_buffer;

/* copied from yy_switch_to_buffer. */
yy_load_buffer_state( );
(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yypop_buffer_state (void)
{
if (!YY_CURRENT_BUFFER)
{
    return;
}

yy_delete_buffer(YY_CURRENT_BUFFER );
YY_CURRENT_BUFFER_LVALUE = NULL;
if ((yy_buffer_stack_top) > 0)
{
    --(yy_buffer_stack_top);
}

if (YY_CURRENT_BUFFER)
{
    yy_load_buffer_state( );
    (yy_did_buffer_switch_on_eof) = 1;
}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
int num_to_alloc;

if (!(yy_buffer_stack))
{

    /* First allocation is just for 2 elements, since we don't know if this
     * scanner will even need a stack. We use 2 instead of 1 to avoid an
     * immediate realloc on the next call.
     */
    num_to_alloc = 1;
    (yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
                        (num_to_alloc * sizeof(struct yy_buffer_state*)
                        );
    if ( ! (yy_buffer_stack) )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
    }

    memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

    (yy_buffer_stack_max) = num_to_alloc;
    (yy_buffer_stack_top) = 0;
    return;
}

if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1)
{

    /* Increase the buffer to prepare for a possible push. */
    int grow_size = 8 /* arbitrary grow size */;

    num_to_alloc = (yy_buffer_stack_max) + grow_size;
    (yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
                        ((yy_buffer_stack),
                         num_to_alloc * sizeof(struct yy_buffer_state*)
                        );
    if ( ! (yy_buffer_stack) )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
    }

    /* zero only the new slots.*/
    memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
    (yy_buffer_stack_max) = num_to_alloc;
}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
YY_BUFFER_STATE b;

if ( size < 2 ||
        base[size - 2] != YY_END_OF_BUFFER_CHAR ||
        base[size - 1] != YY_END_OF_BUFFER_CHAR )
    /* They forgot to leave room for the EOB's. */
{
    return 0;
}

b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
if ( ! b )
{
    YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
}

b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
b->yy_buf_pos = b->yy_ch_buf = base;
b->yy_is_our_buffer = 0;
b->yy_input_file = 0;
b->yy_n_chars = b->yy_buf_size;
b->yy_is_interactive = 0;
b->yy_at_bol = 1;
b->yy_fill_buffer = 0;
b->yy_buffer_status = YY_BUFFER_NEW;

yy_switch_to_buffer(b  );

return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{

return yy_scan_bytes(yystr, strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
YY_BUFFER_STATE b;
char *buf;
yy_size_t n;
int i;

/* Get memory for full buffer, including space for trailing EOB's. */
n = _yybytes_len + 2;
buf = (char *) yyalloc(n  );
if ( ! buf )
{
    YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
}

for ( i = 0; i < _yybytes_len; ++i )
{
    buf[i] = yybytes[i];
}

buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

b = yy_scan_buffer(buf, n );
if ( ! b )
{
    YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
}

/* It's okay to grow etc. this buffer, and we should throw it
 * away when we're done.
 */
b->yy_is_our_buffer = 1;

return b;
}

static void yy_push_state (int  new_state )
{
if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
{
    yy_size_t new_size;

    (yy_start_stack_depth) += YY_START_STACK_INCR;
    new_size = (yy_start_stack_depth) * sizeof( int );

    if ( ! (yy_start_stack) )
    {
        (yy_start_stack) = (int *) yyalloc(new_size  );
    }

    else
    {
        (yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack), new_size  );
    }

    if ( ! (yy_start_stack) )
    {
        YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
    }
}

(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

BEGIN(new_state);
}

static void yy_pop_state  (void)
{
if ( --(yy_start_stack_ptr) < 0 )
{
    YY_FATAL_ERROR( "start-condition stack underflow" );
}

BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

static int yy_top_state  (void)
{
return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
(void) fprintf( stderr, "%s\n", msg );
exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int yyget_lineno  (void)
{

return yylineno;
}

/** Get the input stream.
 *
 */
FILE *yyget_in  (void)
{
return yyin;
}

/** Get the output stream.
 *
 */
FILE *yyget_out  (void)
{
return yyout;
}

/** Get the length of the current token.
 *
 */
int yyget_leng  (void)
{
return yyleng;
}

/** Get the current token.
 *
 */

char *yyget_text  (void)
{
return yytext;
}

/** Set the current line number.
 * @param line_number
 *
 */
void yyset_lineno (int  line_number )
{

yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 *
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
yyout = out_str ;
}

int yyget_debug  (void)
{
return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
/* Initialization is the same as for the non-reentrant scanner.
* This function is called from yylex_destroy(), so don't allocate here.
*/

(yy_buffer_stack) = 0;
(yy_buffer_stack_top) = 0;
(yy_buffer_stack_max) = 0;
(yy_c_buf_p) = (char *) 0;
(yy_init) = 0;
(yy_start) = 0;

(yy_start_stack_ptr) = 0;
(yy_start_stack_depth) = 0;
(yy_start_stack) =  NULL;

(yy_state_buf) = 0;
(yy_state_ptr) = 0;
(yy_full_match) = 0;
(yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
yyin = stdin;
yyout = stdout;
#else
yyin = (FILE *) 0;
yyout = (FILE *) 0;
#endif

/* For future reference: Set errno on error, since we are called by
 * yylex_init()
 */
return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{

/* Pop the buffer stack, destroying each element. */
while (YY_CURRENT_BUFFER)
{
    yy_delete_buffer(YY_CURRENT_BUFFER  );
    YY_CURRENT_BUFFER_LVALUE = NULL;
    yypop_buffer_state();
}

/* Destroy the stack itself. */
yyfree((yy_buffer_stack) );
(yy_buffer_stack) = NULL;

/* Destroy the start condition stack. */
yyfree((yy_start_stack)  );
(yy_start_stack) = NULL;

yyfree ( (yy_state_buf) );
(yy_state_buf)  = NULL;

/* Reset the globals. This is important in a non-reentrant scanner so the next time
 * yylex() is called, initialization will occur. */
yy_init_globals( );

return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
register int i;
for ( i = 0; i < n; ++i )
{
    s1[i] = s2[i];
}
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
register int n;
for ( n = 0; s[n]; ++n )
    ;

return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
/* The cast to (char *) in the following accommodates both
 * implementations that use char* generic pointers, and those
 * that use void* generic pointers.  It works with the latter
 * because both ANSI C and C++ allow castless assignment from
 * any pointer type to void*, and deal with argument conversions
 * as though doing an assignment.
 */
return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token)
{
last_token = token;
#ifdef DEV
std::cout << "--> [DEBUG] TOKEN : " << token << " - " << token_to_string(token) << std::endl;
#endif
return token;
}

int get_last_token()
{
return last_token;
}

void scan_step()
{
yylloc.first_line = yylloc.last_line;
yylloc.first_column = yylloc.last_column;
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
for (; *in != 'd' && *in != 'D'; ++in);
*in = 'e';
}

#ifdef _MSC_VER
int isatty (int desc)
{
return 0;
}
#endif

#ifdef DEV
std::string token_to_string(int token)
{
std::string str;
switch (token)
{
    case AND :
        str = "AND";
        break;
    case ASSIGN :
        str = "ASSIGN";
        break;
    case BOOLFALSE :
        str = "BOOLFALSE";
        break;
    case BOOLTRUE :
        str = "BOOLTRUE";
        break;
    case BREAK :
        str = "BREAK";
        break;
    case CASE :
        str = "CASE";
        break;
    case CATCH :
        str = "CATCH";
        break;
    case COLON :
        str = "COLON";
        break;
    case COMMA :
        str = "COMMA";
        break;
    case COMMENT :
        str = "COMMENT";
        break;
    case CONTINUE :
        str = "CONTINUE";
        break;
    case CONTROLLDIVIDE :
        str = "CONTROLLDIVIDE";
        break;
    case CONTROLRDIVIDE :
        str = "CONTROLRDIVIDE";
        break;
    case CONTROLTIMES :
        str = "CONTROLTIMES";
        break;
    case DO :
        str = "DO";
        break;
    case DOLLAR :
        str = "DOLLAR";
        break;
    case DOT :
        str = "DOT";
        break;
    case DOTLDIVIDE :
        str = "DOTLDIVIDE";
        break;
    case DOTPOWER :
        str = "DOTPOWER";
        break;
    case DOTQUOTE :
        str = "DOTQUOTE";
        break;
    case DOTRDIVIDE :
        str = "DOTRDIVIDE";
        break;
    case DOTS :
        str = "DOTS";
        break;
    case DOTTIMES :
        str = "DOTTIMES";
        break;
    case ELSE :
        str = "ELSE";
        break;
    case ELSEIF :
        str = "ELSEIF";
        break;
    case END :
        str = "END";
        break;
    case ENDFUNCTION :
        str = "ENDFUNCTION";
        break;
    case EOL :
        str = "EOL";
        break;
    case EQ :
        str = "EQ";
        break;
    case FLEX_ERROR :
        str = "FLEX_ERROR";
        break;
    case FOR :
        str = "FOR";
        break;
    case FUNCTION :
        str = "FUNCTION";
        break;
    case GE :
        str = "GE";
        break;
    case GT :
        str = "GT";
        break;
    case ID :
        str = "ID";
        break;
    case IF :
        str = "IF";
        break;
    case KRONLDIVIDE :
        str = "KRONLDIVIDE";
        break;
    case KRONRDIVIDE :
        str = "KRONRDIVIDE";
        break;
    case KRONTIMES :
        str = "KRONTIMES";
        break;
    case LBRACE :
        str = "LBRACE";
        break;
    case LBRACK :
        str = "LBRACK";
        break;
    case LDIVIDE :
        str = "LDIVIDE";
        break;
    case LE :
        str = "LE";
        break;
    case LPAREN :
        str = "LPAREN";
        break;
    case LT :
        str = "LT";
        break;
    case MINUS :
        str = "MINUS";
        break;
    case NE :
        str = "NE";
        break;
    case NOT :
        str = "NOT";
        break;
    case NUM :
        str = "NUM";
        break;
    case OR :
        str = "OR";
        break;
    case OROR :
        str = "OROR";
        break;
    case OTHERWISE :
        str = "OTHERWISE";
        break;
    case PLUS :
        str = "PLUS";
        break;
    case POWER :
        str = "POWER";
        break;
    case QUOTE :
        str = "QUOTE";
        break;
    case RBRACE :
        str = "RBRACE";
        break;
    case RBRACK :
        str = "RBRACK";
        break;
    case RDIVIDE :
        str = "RDIVIDE";
        break;
    case RETURN :
        str = "RETURN";
        break;
    case RPAREN :
        str = "RPAREN";
        break;
    case SELECT :
        str = "SELECT";
        break;
    case SEMI :
        str = "SEMI";
        break;
    case SPACES :
        str = "SPACES";
        break;
    case STR :
        str = "STR";
        break;
    case SWITCH :
        str = "SWITCH";
        break;
    case THEN :
        str = "THEN";
        break;
    case TIMES :
        str = "TIMES";
        break;
    case TRY :
        str = "TRY";
        break;
    case VARFLOAT :
        str = "VARFLOAT";
        break;
    case VARINT :
        str = "VARINT";
        break;
    case WHILE :
        str = "WHILE";
        break;
    default :
        str = "UNKNOWN";
        break;
}
return str;

}
#endif

